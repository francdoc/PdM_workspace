
TP_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000548c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  0000701c  2**0
                  CONTENTS
  4 .ARM          00000008  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005758  08005758  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800575c  0800575c  0000675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005760  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000701c  2**0
                  CONTENTS
 10 .bss          000002c4  2000001c  2000001c  0000701c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  0000701c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012fa8  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f44  00000000  00000000  00019ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  0001cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c73  00000000  00000000  0001df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284d4  00000000  00000000  0001ebeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017274  00000000  00000000  000470bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5985  00000000  00000000  0005e333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143cb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004190  00000000  00000000  00143cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00147e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005620 	.word	0x08005620

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005620 	.word	0x08005620

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 fc3c 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f826 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 80004f8:	f000 f890 	bl	800061c <MX_I2C1_Init>
  MX_RTC_Init();
 80004fc:	f000 f9e6 	bl	80008cc <MX_RTC_Init>
  MX_GPIO_Init();
 8000500:	f000 f936 	bl	8000770 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000504:	f000 f8fe 	bl	8000704 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8000508:	2000      	movs	r0, #0
 800050a:	f001 fbc5 	bl	8001c98 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fbc2 	bl	8001c98 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000514:	2002      	movs	r0, #2
 8000516:	f001 fbbf 	bl	8001c98 <BSP_LED_Init>

  delayInit(&delaySys, DELAYsys);
 800051a:	4b08      	ldr	r3, [pc, #32]	@ (800053c <main+0x50>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	4807      	ldr	r0, [pc, #28]	@ (8000540 <main+0x54>)
 8000522:	f001 f927 	bl	8001774 <delayInit>

  APP_init();
 8000526:	f000 fe19 	bl	800115c <APP_init>
  while (1) // system loop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (delayRead(&delaySys))
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <main+0x54>)
 800052c:	f001 f939 	bl	80017a2 <delayRead>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <main+0x3e>
    {
      APP_update();
 8000536:	f000 fe1f 	bl	8001178 <APP_update>
    if (delayRead(&delaySys))
 800053a:	e7f6      	b.n	800052a <main+0x3e>
 800053c:	20000000 	.word	0x20000000
 8000540:	20000038 	.word	0x20000038

08000544 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	@ 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 f820 	bl	8005598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	4a28      	ldr	r2, [pc, #160]	@ (8000614 <SystemClock_Config+0xd0>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	@ 0x40
 8000578:	4b26      	ldr	r3, [pc, #152]	@ (8000614 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <SystemClock_Config+0xd4>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80005a0:	2309      	movs	r3, #9
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	@ 0xa8
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fc41 	bl	8002e54 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 f99e 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fea2 	bl	8003344 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000606:	f000 f987 	bl	8000918 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000622:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 8000624:	4a33      	ldr	r2, [pc, #204]	@ (80006f4 <MX_I2C1_Init+0xd8>)
 8000626:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000628:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 800062a:	4a33      	ldr	r2, [pc, #204]	@ (80006f8 <MX_I2C1_Init+0xdc>)
 800062c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062e:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 800063c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064e:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <MX_I2C1_Init+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <MX_I2C1_Init+0xe0>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <MX_I2C1_Init+0xe0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000676:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000688:	2304      	movs	r3, #4
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	481b      	ldr	r0, [pc, #108]	@ (8000700 <MX_I2C1_Init+0xe4>)
 8000694:	f001 fce6 	bl	8002064 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_I2C1_Init+0xe0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a16      	ldr	r2, [pc, #88]	@ (80006fc <MX_I2C1_Init+0xe0>)
 80006a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_I2C1_Init+0xe0>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	480e      	ldr	r0, [pc, #56]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 80006b6:	f001 feb5 	bl	8002424 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 80006c0:	f000 f92a 	bl	8000918 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	480a      	ldr	r0, [pc, #40]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 80006c8:	f002 fb49 	bl	8002d5e <HAL_I2CEx_ConfigAnalogFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 80006d2:	f000 f921 	bl	8000918 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_I2C1_Init+0xd4>)
 80006da:	f002 fb7c 	bl	8002dd6 <HAL_I2CEx_ConfigDigitalFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 80006e4:	f000 f918 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000044 	.word	0x20000044
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400

08000704 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_SPI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_SPI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000738:	2238      	movs	r2, #56	@ 0x38
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000756:	f003 fce1 	bl	800411c <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f8da 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000098 	.word	0x20000098
 800076c:	40013000 	.word	0x40013000

08000770 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b4c      	ldr	r3, [pc, #304]	@ (80008bc <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a4b      	ldr	r2, [pc, #300]	@ (80008bc <MX_GPIO_Init+0x14c>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b49      	ldr	r3, [pc, #292]	@ (80008bc <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b45      	ldr	r3, [pc, #276]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a44      	ldr	r2, [pc, #272]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b42      	ldr	r3, [pc, #264]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b3e      	ldr	r3, [pc, #248]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a3d      	ldr	r2, [pc, #244]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b3b      	ldr	r3, [pc, #236]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a36      	ldr	r2, [pc, #216]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b34      	ldr	r3, [pc, #208]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a2f      	ldr	r2, [pc, #188]	@ (80008bc <MX_GPIO_Init+0x14c>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_GPIO_Init+0x14c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a28      	ldr	r2, [pc, #160]	@ (80008bc <MX_GPIO_Init+0x14c>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f244 0189 	movw	r1, #16521	@ 0x4089
 8000834:	4822      	ldr	r0, [pc, #136]	@ (80008c0 <MX_GPIO_Init+0x150>)
 8000836:	f001 fdc1 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	@ 0x40
 800083e:	4821      	ldr	r0, [pc, #132]	@ (80008c4 <MX_GPIO_Init+0x154>)
 8000840:	f001 fdbc 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	481b      	ldr	r0, [pc, #108]	@ (80008c8 <MX_GPIO_Init+0x158>)
 800085c:	f001 fc02 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 8000860:	f244 0389 	movw	r3, #16521	@ 0x4089
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <MX_GPIO_Init+0x150>)
 800087a:	f001 fbf3 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800087e:	2340      	movs	r3, #64	@ 0x40
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <MX_GPIO_Init+0x154>)
 8000896:	f001 fbe5 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_GPIO_Init+0x154>)
 80008ae:	f001 fbd9 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	@ 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40021800 	.word	0x40021800
 80008c8:	40020800 	.word	0x40020800

080008cc <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_RTC_Init+0x44>)
 80008d2:	4a10      	ldr	r2, [pc, #64]	@ (8000914 <MX_RTC_Init+0x48>)
 80008d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_RTC_Init+0x44>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_RTC_Init+0x44>)
 80008de:	227f      	movs	r2, #127	@ 0x7f
 80008e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_RTC_Init+0x44>)
 80008e4:	22ff      	movs	r2, #255	@ 0xff
 80008e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_RTC_Init+0x44>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_RTC_Init+0x44>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_RTC_Init+0x44>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_RTC_Init+0x44>)
 80008fc:	f003 f902 	bl	8003b04 <HAL_RTC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000906:	f000 f807 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000138 	.word	0x20000138
 8000914:	40002800 	.word	0x40002800

08000918 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <HAL_I2C_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12c      	bne.n	80009f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_I2C_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_I2C_MspInit+0x88>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009b2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <HAL_I2C_MspInit+0x8c>)
 80009d0:	f001 fb48 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <HAL_I2C_MspInit+0x88>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <HAL_I2C_MspInit+0x88>)
 80009de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <HAL_I2C_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	@ 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40005400 	.word	0x40005400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020400 	.word	0x40020400

08000a04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	@ 0x38
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	2230      	movs	r2, #48	@ 0x30
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 fdbf 	bl	8005598 <memset>
  if(hrtc->Instance==RTC)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <HAL_RTC_MspInit+0x4c>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d111      	bne.n	8000a48 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a24:	2320      	movs	r3, #32
 8000a26:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fea6 	bl	8003784 <HAL_RCCEx_PeriphCLKConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a3e:	f7ff ff6b 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <HAL_RTC_MspInit+0x50>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3738      	adds	r7, #56	@ 0x38
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40002800 	.word	0x40002800
 8000a54:	42470e3c 	.word	0x42470e3c

08000a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d149      	bne.n	8000b0e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	4a26      	ldr	r2, [pc, #152]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8a:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <HAL_SPI_MspInit+0xc8>)
 8000aea:	f001 fabb 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aee:	2320      	movs	r3, #32
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afe:	2305      	movs	r3, #5
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <HAL_SPI_MspInit+0xcc>)
 8000b0a:	f001 faab 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	@ 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40013000 	.word	0x40013000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <HAL_UART_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b94:	2307      	movs	r3, #7
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000ba0:	f001 fa60 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	@ 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <NMI_Handler+0x4>

08000bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <MemManage_Handler+0x4>

08000bd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0e:	f001 f8ff 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f004 fcad 	bl	80055c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fc3d 	bl	80004ec <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c80:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 8000c84:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c88:	200002e0 	.word	0x200002e0

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <APP_FSM_init>:
/**
 * @brief Initializes the finite state machine (FSM) to the default temperature state.
 * @retval None
 */
static void APP_FSM_init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
    currentTempState = TEMP_NORMAL;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <APP_FSM_init+0x14>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000158 	.word	0x20000158

08000ca8 <APP_uartPrepareData>:
 * @param tag: The tag to prepend to the data (e.g., "Temperature: ").
 * @param unit: The unit to append to the data (e.g., "C" or "%").
 * @retval None
 */
static void APP_uartPrepareData(float bme280_data, char *message, const char *tag, const char *unit)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cb2:	60b8      	str	r0, [r7, #8]
 8000cb4:	6079      	str	r1, [r7, #4]
 8000cb6:	603a      	str	r2, [r7, #0]
    int intPart = (int)bme280_data;
 8000cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 3a90 	vmov	r3, s15
 8000cc4:	617b      	str	r3, [r7, #20]
    int fracPart = (int)((bme280_data - intPart) * FRACTIONAL_MULTIPLIER);
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000d84 <APP_uartPrepareData+0xdc>
 8000cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce4:	ee17 3a90 	vmov	r3, s15
 8000ce8:	613b      	str	r3, [r7, #16]

    strcpy(message, tag);
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f004 fc8f 	bl	8005610 <strcpy>
    memset(strbuff, ZEROVAL, sizeof(strbuff));
 8000cf2:	2232      	movs	r2, #50	@ 0x32
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4824      	ldr	r0, [pc, #144]	@ (8000d88 <APP_uartPrepareData+0xe0>)
 8000cf8:	f004 fc4e 	bl	8005598 <memset>
    itoa(intPart, strbuff, DECIMAL);
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4922      	ldr	r1, [pc, #136]	@ (8000d88 <APP_uartPrepareData+0xe0>)
 8000d00:	6978      	ldr	r0, [r7, #20]
 8000d02:	f004 fc05 	bl	8005510 <itoa>
    strcat(message, strbuff);
 8000d06:	4920      	ldr	r1, [pc, #128]	@ (8000d88 <APP_uartPrepareData+0xe0>)
 8000d08:	68b8      	ldr	r0, [r7, #8]
 8000d0a:	f004 fc4d 	bl	80055a8 <strcat>
    strcat(message, ".");
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f7ff fa6c 	bl	80001ec <strlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	491b      	ldr	r1, [pc, #108]	@ (8000d8c <APP_uartPrepareData+0xe4>)
 8000d1e:	461a      	mov	r2, r3
 8000d20:	460b      	mov	r3, r1
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	8013      	strh	r3, [r2, #0]
    memset(strbuff, ZEROVAL, sizeof(strbuff));
 8000d26:	2232      	movs	r2, #50	@ 0x32
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4817      	ldr	r0, [pc, #92]	@ (8000d88 <APP_uartPrepareData+0xe0>)
 8000d2c:	f004 fc34 	bl	8005598 <memset>
    itoa(fracPart, strbuff, DECIMAL);
 8000d30:	220a      	movs	r2, #10
 8000d32:	4915      	ldr	r1, [pc, #84]	@ (8000d88 <APP_uartPrepareData+0xe0>)
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f004 fbeb 	bl	8005510 <itoa>
    strcat(message, strbuff);
 8000d3a:	4913      	ldr	r1, [pc, #76]	@ (8000d88 <APP_uartPrepareData+0xe0>)
 8000d3c:	68b8      	ldr	r0, [r7, #8]
 8000d3e:	f004 fc33 	bl	80055a8 <strcat>
    strcat(message, " ");
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f7ff fa52 	bl	80001ec <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4413      	add	r3, r2
 8000d50:	490f      	ldr	r1, [pc, #60]	@ (8000d90 <APP_uartPrepareData+0xe8>)
 8000d52:	461a      	mov	r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	8013      	strh	r3, [r2, #0]
    strcat(message, unit);
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	68b8      	ldr	r0, [r7, #8]
 8000d5e:	f004 fc23 	bl	80055a8 <strcat>
    strcat(message, "\r\n");
 8000d62:	68b8      	ldr	r0, [r7, #8]
 8000d64:	f7ff fa42 	bl	80001ec <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <APP_uartPrepareData+0xec>)
 8000d72:	8811      	ldrh	r1, [r2, #0]
 8000d74:	7892      	ldrb	r2, [r2, #2]
 8000d76:	8019      	strh	r1, [r3, #0]
 8000d78:	709a      	strb	r2, [r3, #2]
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	42c80000 	.word	0x42c80000
 8000d88:	2000015c 	.word	0x2000015c
 8000d8c:	08005638 	.word	0x08005638
 8000d90:	0800563c 	.word	0x0800563c
 8000d94:	08005640 	.word	0x08005640

08000d98 <APP_uartPrepareSensorTempHum>:
 * @param message_tem: Buffer to store the formatted temperature data.
 * @param message_hum: Buffer to store the formatted humidity data.
 * @retval None
 */
static void APP_uartPrepareSensorTempHum(char *message_tem, char *message_hum)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    APP_uartPrepareData((float)temperature, message_tem, "Temperature: ", "C");
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <APP_uartPrepareSensorTempHum+0x3c>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <APP_uartPrepareSensorTempHum+0x40>)
 8000daa:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <APP_uartPrepareSensorTempHum+0x44>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	eeb0 0a67 	vmov.f32	s0, s15
 8000db2:	f7ff ff79 	bl	8000ca8 <APP_uartPrepareData>
    APP_uartPrepareData((float)humidity, message_hum, "Humidity: ", "%");
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <APP_uartPrepareSensorTempHum+0x48>)
 8000db8:	edd3 7a00 	vldr	s15, [r3]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <APP_uartPrepareSensorTempHum+0x4c>)
 8000dbe:	490a      	ldr	r1, [pc, #40]	@ (8000de8 <APP_uartPrepareSensorTempHum+0x50>)
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	f7ff ff6f 	bl	8000ca8 <APP_uartPrepareData>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000294 	.word	0x20000294
 8000dd8:	08005644 	.word	0x08005644
 8000ddc:	08005648 	.word	0x08005648
 8000de0:	20000298 	.word	0x20000298
 8000de4:	08005658 	.word	0x08005658
 8000de8:	0800565c 	.word	0x0800565c

08000dec <APP_uartDisplaySensorData>:
 * @param message_1: The formatted temperature message to send.
 * @param message_2: The formatted humidity message to send.
 * @retval None
 */
static void APP_uartDisplaySensorData(char *message_1, char *message_2)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
    uartSendString((uint8_t *)message_1);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fef6 	bl	8001be8 <uartSendString>
    uartSendString((uint8_t *)message_2);
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fef3 	bl	8001be8 <uartSendString>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <APP_lcdPrepareSensorData>:
/**
 * @brief Prepares the temperature and humidity data for LCD display.
 * @retval None
 */
static void APP_lcdPrepareSensorData(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	ed2d 8b02 	vpush	{d8}
 8000e12:	af00      	add	r7, sp, #0
    itoa((int)temperature, lcdTempStr, DECIMAL);
 8000e14:	4b37      	ldr	r3, [pc, #220]	@ (8000ef4 <APP_lcdPrepareSensorData+0xe8>)
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e1e:	220a      	movs	r2, #10
 8000e20:	4935      	ldr	r1, [pc, #212]	@ (8000ef8 <APP_lcdPrepareSensorData+0xec>)
 8000e22:	ee17 0a90 	vmov	r0, s15
 8000e26:	f004 fb73 	bl	8005510 <itoa>
    strcat(lcdTempStr, ".");
 8000e2a:	4833      	ldr	r0, [pc, #204]	@ (8000ef8 <APP_lcdPrepareSensorData+0xec>)
 8000e2c:	f7ff f9de 	bl	80001ec <strlen>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <APP_lcdPrepareSensorData+0xec>)
 8000e36:	4413      	add	r3, r2
 8000e38:	4930      	ldr	r1, [pc, #192]	@ (8000efc <APP_lcdPrepareSensorData+0xf0>)
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	8013      	strh	r3, [r2, #0]
    itoa((int)((temperature - (int)temperature) * FRACTIONAL_MULTIPLIER), lcdTempStr + strlen(lcdTempStr), DECIMAL);
 8000e42:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <APP_lcdPrepareSensorData+0xe8>)
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <APP_lcdPrepareSensorData+0xe8>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000f00 <APP_lcdPrepareSensorData+0xf4>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e62:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8000e66:	4824      	ldr	r0, [pc, #144]	@ (8000ef8 <APP_lcdPrepareSensorData+0xec>)
 8000e68:	f7ff f9c0 	bl	80001ec <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a22      	ldr	r2, [pc, #136]	@ (8000ef8 <APP_lcdPrepareSensorData+0xec>)
 8000e70:	4413      	add	r3, r2
 8000e72:	220a      	movs	r2, #10
 8000e74:	4619      	mov	r1, r3
 8000e76:	ee18 0a10 	vmov	r0, s16
 8000e7a:	f004 fb49 	bl	8005510 <itoa>

    itoa((int)humidity, lcdHumStr, DECIMAL);
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <APP_lcdPrepareSensorData+0xf8>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e88:	220a      	movs	r2, #10
 8000e8a:	491f      	ldr	r1, [pc, #124]	@ (8000f08 <APP_lcdPrepareSensorData+0xfc>)
 8000e8c:	ee17 0a90 	vmov	r0, s15
 8000e90:	f004 fb3e 	bl	8005510 <itoa>
    strcat(lcdHumStr, ".");
 8000e94:	481c      	ldr	r0, [pc, #112]	@ (8000f08 <APP_lcdPrepareSensorData+0xfc>)
 8000e96:	f7ff f9a9 	bl	80001ec <strlen>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <APP_lcdPrepareSensorData+0xfc>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4916      	ldr	r1, [pc, #88]	@ (8000efc <APP_lcdPrepareSensorData+0xf0>)
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	8013      	strh	r3, [r2, #0]
    itoa((int)((humidity - (int)humidity) * FRACTIONAL_MULTIPLIER), lcdHumStr + strlen(lcdHumStr), DECIMAL);
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <APP_lcdPrepareSensorData+0xf8>)
 8000eae:	ed93 7a00 	vldr	s14, [r3]
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <APP_lcdPrepareSensorData+0xf8>)
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000f00 <APP_lcdPrepareSensorData+0xf4>
 8000ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ecc:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <APP_lcdPrepareSensorData+0xfc>)
 8000ed2:	f7ff f98b 	bl	80001ec <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <APP_lcdPrepareSensorData+0xfc>)
 8000eda:	4413      	add	r3, r2
 8000edc:	220a      	movs	r2, #10
 8000ede:	4619      	mov	r1, r3
 8000ee0:	ee18 0a10 	vmov	r0, s16
 8000ee4:	f004 fb14 	bl	8005510 <itoa>
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	ecbd 8b02 	vpop	{d8}
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000294 	.word	0x20000294
 8000ef8:	200001f8 	.word	0x200001f8
 8000efc:	08005638 	.word	0x08005638
 8000f00:	42c80000 	.word	0x42c80000
 8000f04:	20000298 	.word	0x20000298
 8000f08:	2000022c 	.word	0x2000022c

08000f0c <APP_lcdDisplaySensorData>:
/**
 * @brief Displays the prepared temperature and humidity data on the LCD.
 * @retval None
 */
static void APP_lcdDisplaySensorData(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    API_LCD_DisplayTwoMsgs(APP_HUM_LCD_CURSOR_POS, APP_LCD_LINE_1, (uint8_t *)"H:", (uint8_t *)lcdHumStr);
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <APP_lcdDisplaySensorData+0x20>)
 8000f12:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <APP_lcdDisplaySensorData+0x24>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	2009      	movs	r0, #9
 8000f18:	f000 fddb 	bl	8001ad2 <API_LCD_DisplayTwoMsgs>
    API_LCD_DisplayTwoMsgs(APP_TEMP_LCD_CURSOR_POS, APP_LCD_LINE_2, (uint8_t *)"T:", (uint8_t *)lcdTempStr);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <APP_lcdDisplaySensorData+0x28>)
 8000f1e:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <APP_lcdDisplaySensorData+0x2c>)
 8000f20:	2102      	movs	r1, #2
 8000f22:	2009      	movs	r0, #9
 8000f24:	f000 fdd5 	bl	8001ad2 <API_LCD_DisplayTwoMsgs>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000022c 	.word	0x2000022c
 8000f30:	08005668 	.word	0x08005668
 8000f34:	200001f8 	.word	0x200001f8
 8000f38:	0800566c 	.word	0x0800566c

08000f3c <APP_lcdAlarm>:
/**
 * @brief Displays an alarm message on the LCD in the event of a temperature alarm.
 * @retval None
 */
static void APP_lcdAlarm(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    API_LCD_DisplayMsg(APP_ALARM_LCD_CURSOR_POS, APP_LCD_LINE_2, (uint8_t *)"ALARMA! ");
 8000f40:	4a03      	ldr	r2, [pc, #12]	@ (8000f50 <APP_lcdAlarm+0x14>)
 8000f42:	2102      	movs	r1, #2
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 fddd 	bl	8001b04 <API_LCD_DisplayMsg>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	08005670 	.word	0x08005670

08000f54 <APP_lcdDisplayClock>:
/**
 * @brief Displays the current time on the LCD.
 * @retval None
 */
static void APP_lcdDisplayClock(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
    API_LCD_SetCursorLine(APP_CLOCK_CURSOR_POS, APP_LCD_LINE_1);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 fd98 	bl	8001a90 <API_LCD_SetCursorLine>
    API_LCD_SendBCDData(sTime.Hours);
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <APP_lcdDisplayClock+0x3c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fd67 	bl	8001a38 <API_LCD_SendBCDData>
    API_LCD_SendData(':');
 8000f6a:	203a      	movs	r0, #58	@ 0x3a
 8000f6c:	f000 fd56 	bl	8001a1c <API_LCD_SendData>
    API_LCD_SendBCDData(sTime.Minutes);
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <APP_lcdDisplayClock+0x3c>)
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd5f 	bl	8001a38 <API_LCD_SendBCDData>
    API_LCD_SendData(':');
 8000f7a:	203a      	movs	r0, #58	@ 0x3a
 8000f7c:	f000 fd4e 	bl	8001a1c <API_LCD_SendData>
    API_LCD_SendBCDData(sTime.Seconds);
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <APP_lcdDisplayClock+0x3c>)
 8000f82:	789b      	ldrb	r3, [r3, #2]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fd57 	bl	8001a38 <API_LCD_SendBCDData>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002c4 	.word	0x200002c4

08000f94 <APP_lcdDisplayDate>:
/**
 * @brief Displays the current date on the LCD.
 * @retval None
 */
static void APP_lcdDisplayDate(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
    API_LCD_SetCursorLine(APP_CLOCK_CURSOR_POS, APP_LCD_LINE_2);
 8000f98:	2102      	movs	r1, #2
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 fd78 	bl	8001a90 <API_LCD_SetCursorLine>
    API_LCD_SendBCDData(sDate.Date);
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <APP_lcdDisplayDate+0x3c>)
 8000fa2:	789b      	ldrb	r3, [r3, #2]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fd47 	bl	8001a38 <API_LCD_SendBCDData>
    API_LCD_SendData('/');
 8000faa:	202f      	movs	r0, #47	@ 0x2f
 8000fac:	f000 fd36 	bl	8001a1c <API_LCD_SendData>
    API_LCD_SendBCDData(sDate.Month);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <APP_lcdDisplayDate+0x3c>)
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fd3f 	bl	8001a38 <API_LCD_SendBCDData>
    API_LCD_SendData('/');
 8000fba:	202f      	movs	r0, #47	@ 0x2f
 8000fbc:	f000 fd2e 	bl	8001a1c <API_LCD_SendData>
    API_LCD_SendBCDData(sDate.Year);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <APP_lcdDisplayDate+0x3c>)
 8000fc2:	78db      	ldrb	r3, [r3, #3]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd37 	bl	8001a38 <API_LCD_SendBCDData>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002d8 	.word	0x200002d8

08000fd4 <APP_FSM_update>:
/**
 * @brief Updates the FSM state and triggers the appropriate actions and displays based on the current state.
 * @retval None
 */
static void APP_FSM_update(void)
{
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    memset(messageFsm, ZEROVAL, sizeof(messageFsm)); // Clear the FSM message buffer
 8000fd8:	2232      	movs	r2, #50	@ 0x32
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4837      	ldr	r0, [pc, #220]	@ (80010bc <APP_FSM_update+0xe8>)
 8000fde:	f004 fadb 	bl	8005598 <memset>

    switch (currentTempState)
 8000fe2:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <APP_FSM_update+0xec>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <APP_FSM_update+0x1c>
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d030      	beq.n	8001050 <APP_FSM_update+0x7c>
 8000fee:	e05f      	b.n	80010b0 <APP_FSM_update+0xdc>
    {
    case TEMP_NORMAL:
        if (temperature > THRESHOLD_TEMP) // Transition to ALARM state
 8000ff0:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <APP_FSM_update+0xf0>)
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd15      	ble.n	8001030 <APP_FSM_update+0x5c>
        {
            currentTempState = TEMP_ALARM;
 8001004:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <APP_FSM_update+0xec>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]

            strcpy(messageFsm, "Temperature Alarm State.\r\n");
 800100a:	4a2c      	ldr	r2, [pc, #176]	@ (80010bc <APP_FSM_update+0xe8>)
 800100c:	4b2e      	ldr	r3, [pc, #184]	@ (80010c8 <APP_FSM_update+0xf4>)
 800100e:	4614      	mov	r4, r2
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	c403      	stmia	r4!, {r0, r1}
 800101c:	8022      	strh	r2, [r4, #0]
 800101e:	3402      	adds	r4, #2
 8001020:	0c13      	lsrs	r3, r2, #16
 8001022:	7023      	strb	r3, [r4, #0]
            uartSendString((uint8_t *)messageFsm);
 8001024:	4825      	ldr	r0, [pc, #148]	@ (80010bc <APP_FSM_update+0xe8>)
 8001026:	f000 fddf 	bl	8001be8 <uartSendString>
            APP_lcdAlarm();
 800102a:	f7ff ff87 	bl	8000f3c <APP_lcdAlarm>
        {
            strcpy(messageFsm, "Temperature Normal State.\r\n");
            uartSendString((uint8_t *)messageFsm);
            APP_lcdDisplayDate();
        }
        break;
 800102e:	e042      	b.n	80010b6 <APP_FSM_update+0xe2>
            strcpy(messageFsm, "Temperature Normal State.\r\n");
 8001030:	4a22      	ldr	r2, [pc, #136]	@ (80010bc <APP_FSM_update+0xe8>)
 8001032:	4b26      	ldr	r3, [pc, #152]	@ (80010cc <APP_FSM_update+0xf8>)
 8001034:	4614      	mov	r4, r2
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            uartSendString((uint8_t *)messageFsm);
 8001044:	481d      	ldr	r0, [pc, #116]	@ (80010bc <APP_FSM_update+0xe8>)
 8001046:	f000 fdcf 	bl	8001be8 <uartSendString>
            APP_lcdDisplayDate();
 800104a:	f7ff ffa3 	bl	8000f94 <APP_lcdDisplayDate>
        break;
 800104e:	e032      	b.n	80010b6 <APP_FSM_update+0xe2>

    case TEMP_ALARM:
        if (temperature < THRESHOLD_TEMP) // Transition to NORMAL state
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <APP_FSM_update+0xf0>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 800105a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d512      	bpl.n	800108a <APP_FSM_update+0xb6>
        {
            currentTempState = TEMP_NORMAL;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <APP_FSM_update+0xec>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]

            strcpy(messageFsm, "Temperature Normal State.\r\n");
 800106a:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <APP_FSM_update+0xe8>)
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <APP_FSM_update+0xf8>)
 800106e:	4614      	mov	r4, r2
 8001070:	461d      	mov	r5, r3
 8001072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            uartSendString((uint8_t *)messageFsm);
 800107e:	480f      	ldr	r0, [pc, #60]	@ (80010bc <APP_FSM_update+0xe8>)
 8001080:	f000 fdb2 	bl	8001be8 <uartSendString>
            APP_lcdDisplayDate();
 8001084:	f7ff ff86 	bl	8000f94 <APP_lcdDisplayDate>
        {
            strcpy(messageFsm, "Temperature Alarm State.\r\n");
            uartSendString((uint8_t *)messageFsm);
            APP_lcdAlarm();
        }
        break;
 8001088:	e015      	b.n	80010b6 <APP_FSM_update+0xe2>
            strcpy(messageFsm, "Temperature Alarm State.\r\n");
 800108a:	4a0c      	ldr	r2, [pc, #48]	@ (80010bc <APP_FSM_update+0xe8>)
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <APP_FSM_update+0xf4>)
 800108e:	4614      	mov	r4, r2
 8001090:	461d      	mov	r5, r3
 8001092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109a:	c403      	stmia	r4!, {r0, r1}
 800109c:	8022      	strh	r2, [r4, #0]
 800109e:	3402      	adds	r4, #2
 80010a0:	0c13      	lsrs	r3, r2, #16
 80010a2:	7023      	strb	r3, [r4, #0]
            uartSendString((uint8_t *)messageFsm);
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <APP_FSM_update+0xe8>)
 80010a6:	f000 fd9f 	bl	8001be8 <uartSendString>
            APP_lcdAlarm();
 80010aa:	f7ff ff47 	bl	8000f3c <APP_lcdAlarm>
        break;
 80010ae:	e002      	b.n	80010b6 <APP_FSM_update+0xe2>

    default:
    	APP_FsmErrorHandler();
 80010b0:	f000 f850 	bl	8001154 <APP_FsmErrorHandler>
        break;
 80010b4:	bf00      	nop
    }
}
 80010b6:	bf00      	nop
 80010b8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000260 	.word	0x20000260
 80010c0:	20000158 	.word	0x20000158
 80010c4:	20000294 	.word	0x20000294
 80010c8:	0800567c 	.word	0x0800567c
 80010cc:	08005698 	.word	0x08005698

080010d0 <APP_lcdUpdateTime>:
/**
 * @brief Updates the current time and displays it on the LCD.
 * @retval None
 */
static void APP_lcdUpdateTime(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    ClockUpdateTimeDate();
 80010d4:	f000 fb3a 	bl	800174c <ClockUpdateTimeDate>
    APP_lcdDisplayClock();
 80010d8:	f7ff ff3c 	bl	8000f54 <APP_lcdDisplayClock>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <APP_updateSensorData>:
/**
 * @brief Updates the sensor data by reading from the BME280 sensor.
 * @retval None
 */
static void APP_updateSensorData(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    API_BME280_ReadAndProcess();
 80010e4:	f000 fa04 	bl	80014f0 <API_BME280_ReadAndProcess>
    temperature = API_BME280_GetTemperature();
 80010e8:	f000 fa5c 	bl	80015a4 <API_BME280_GetTemperature>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <APP_updateSensorData+0x28>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
    humidity = API_BME280_GetHumidity();
 80010f6:	f000 fa63 	bl	80015c0 <API_BME280_GetHumidity>
 80010fa:	eef0 7a40 	vmov.f32	s15, s0
 80010fe:	4b03      	ldr	r3, [pc, #12]	@ (800110c <APP_updateSensorData+0x2c>)
 8001100:	edc3 7a00 	vstr	s15, [r3]
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000294 	.word	0x20000294
 800110c:	20000298 	.word	0x20000298

08001110 <APP_prepareAndDisplaySensorData>:
/**
 * @brief Prepares and displays the sensor data on the LCD.
 * @retval None
 */
static void APP_prepareAndDisplaySensorData(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    APP_lcdPrepareSensorData();
 8001114:	f7ff fe7a 	bl	8000e0c <APP_lcdPrepareSensorData>
    APP_lcdDisplaySensorData();
 8001118:	f7ff fef8 	bl	8000f0c <APP_lcdDisplaySensorData>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <APP_prepareAndSendUARTData>:
/**
 * @brief Prepares and sends the sensor data over UART.
 * @retval None
 */
static void APP_prepareAndSendUARTData(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    memset(message_tem, ZEROVAL, sizeof(message_tem)); // I clean the message buffer before populating it again with the data prepare function that's next.
 8001124:	2232      	movs	r2, #50	@ 0x32
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	@ (800114c <APP_prepareAndSendUARTData+0x2c>)
 800112a:	f004 fa35 	bl	8005598 <memset>
    memset(message_hum, ZEROVAL, sizeof(message_hum));
 800112e:	2232      	movs	r2, #50	@ 0x32
 8001130:	2100      	movs	r1, #0
 8001132:	4807      	ldr	r0, [pc, #28]	@ (8001150 <APP_prepareAndSendUARTData+0x30>)
 8001134:	f004 fa30 	bl	8005598 <memset>

    APP_uartPrepareSensorTempHum(message_tem, message_hum);
 8001138:	4905      	ldr	r1, [pc, #20]	@ (8001150 <APP_prepareAndSendUARTData+0x30>)
 800113a:	4804      	ldr	r0, [pc, #16]	@ (800114c <APP_prepareAndSendUARTData+0x2c>)
 800113c:	f7ff fe2c 	bl	8000d98 <APP_uartPrepareSensorTempHum>
    APP_uartDisplaySensorData(message_tem, message_hum);
 8001140:	4903      	ldr	r1, [pc, #12]	@ (8001150 <APP_prepareAndSendUARTData+0x30>)
 8001142:	4802      	ldr	r0, [pc, #8]	@ (800114c <APP_prepareAndSendUARTData+0x2c>)
 8001144:	f7ff fe52 	bl	8000dec <APP_uartDisplaySensorData>
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000190 	.word	0x20000190
 8001150:	200001c4 	.word	0x200001c4

08001154 <APP_FsmErrorHandler>:

/**
 * @brief Handles invalid case in APP FSM.
 */
static void APP_FsmErrorHandler()
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
    while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <APP_FsmErrorHandler+0x4>

0800115c <APP_init>:
/**
 * @brief Initializes all necessary components for the application, including the clock, FSM, BME280 sensor, UART, and LCD.
 * @retval None
 */
void APP_init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    ClockInit();
 8001160:	f000 faba 	bl	80016d8 <ClockInit>
    APP_FSM_init();
 8001164:	f7ff fd94 	bl	8000c90 <APP_FSM_init>
    API_BME280_Init();
 8001168:	f000 f98c 	bl	8001484 <API_BME280_Init>
    uartInit();
 800116c:	f000 fd0c 	bl	8001b88 <uartInit>
    API_LCD_Initialize();
 8001170:	f000 fc1e 	bl	80019b0 <API_LCD_Initialize>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <APP_update>:
/**
 * @brief Main update function that handles sensor data acquisition, LCD updates, sensor data display, and FSM updates.
 * @retval None
 */
void APP_update(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    APP_updateSensorData();
 800117c:	f7ff ffb0 	bl	80010e0 <APP_updateSensorData>
    APP_lcdUpdateTime();
 8001180:	f7ff ffa6 	bl	80010d0 <APP_lcdUpdateTime>
    APP_prepareAndDisplaySensorData();
 8001184:	f7ff ffc4 	bl	8001110 <APP_prepareAndDisplaySensorData>
    APP_prepareAndSendUARTData();
 8001188:	f7ff ffca 	bl	8001120 <APP_prepareAndSendUARTData>
    APP_FSM_update();
 800118c:	f7ff ff22 	bl	8000fd4 <APP_FSM_update>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <combineBytes>:
 * @param  uint8_t msb: Most significant byte.
 * @param  uint8_t lsb: Least significant byte.
 * @retval uint16_t: Combined 16-bit integer.
 */
static uint16_t combineBytes(uint8_t msb, uint8_t lsb)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
  // Safety check to ensure that inputs are 8 bits wide and are not being potentially truncated if they were bigger than uint8_t. .
  if (msb > 0xFF || lsb > 0xFF)
  {
    API_BME280_ErrorHandler();
  }
  return ((uint16_t)msb << 8) | lsb;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	b29b      	uxth	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <extractBits>:
 * @param  uint8_t mask: Mask to apply for bit extraction.
 * @param  uint8_t shift: Number of bits to shift after masking.
 * @retval uint8_t: Extracted bits as a byte.
 */
static uint8_t extractBits(uint8_t value, uint8_t mask, uint8_t shift)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	460b      	mov	r3, r1
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	717b      	strb	r3, [r7, #5]
  // Safety check to ensure that inputs are 8 bits wide and are not being potentially truncated if they were bigger than uint8_t. .
  if (value > 0xFF || mask > 0xFF || shift > 7)
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d901      	bls.n	80011dc <extractBits+0x1c>
  {
    API_BME280_ErrorHandler();
 80011d8:	f000 fa00 	bl	80015dc <API_BME280_ErrorHandler>
  }
  return (value & mask) >> shift;
 80011dc:	79fa      	ldrb	r2, [r7, #7]
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	4013      	ands	r3, r2
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	fa42 f303 	asr.w	r3, r2, r3
 80011ec:	b2db      	uxtb	r3, r3
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <errorLedSignal>:
 * @brief  Flashes LED to signal an error in BME280 operations.
 * @param  None
 * @retval None
 */
static void errorLedSignal(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
  for (int i = 0; i <= NumErrorRxBlinks; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	e008      	b.n	8001214 <errorLedSignal+0x1e>
  {
    BME280_HAL_Blink(LED3); // Sensor error.
 8001202:	2002      	movs	r0, #2
 8001204:	f000 fa57 	bl	80016b6 <BME280_HAL_Blink>
    BME280_HAL_Delay(BME280_HAL_DELAY);
 8001208:	2064      	movs	r0, #100	@ 0x64
 800120a:	f000 fa49 	bl	80016a0 <BME280_HAL_Delay>
  for (int i = 0; i <= NumErrorRxBlinks; i++)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	ddf3      	ble.n	8001202 <errorLedSignal+0xc>
  }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <calibrationParams>:
 *         Each compensation word is a 16-bit signed or unsigned integer value stored in two’s complement.
 * @param  None
 * @retval None
 */
static void calibrationParams(void)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08b      	sub	sp, #44	@ 0x2c
 8001228:	af00      	add	r7, sp, #0
  uint8_t calibDataBuffer2[BME280_CALIBDATA_BLOCK2_SIZE];

  /* Read the first block of calibration data from the sensor, storing the data read from memory addresses 0x88 to 0xA1.
   * This block contains the calibration values for temperature and pressure, covering a 26-byte range.
   * Although the pressure values won't be used, they will be extracted anyways.*/
  BME280_HAL_SPI_Read(BME280_CALIB_00_ADDR, calibDataBuffer1, BME280_CALIBDATA_BLOCK1_SIZE);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	221a      	movs	r2, #26
 8001230:	4619      	mov	r1, r3
 8001232:	2088      	movs	r0, #136	@ 0x88
 8001234:	f000 fa06 	bl	8001644 <BME280_HAL_SPI_Read>

  /* Read the second block of calibration data from the sensor, storing the data read from memory addresses 0x88 to 0xA1.
   * This block contains the calibration values for humidity, covering a 7-byte range.*/
  BME280_HAL_SPI_Read(BME280_CALIB_26_ADDR, calibDataBuffer2, BME280_CALIBDATA_BLOCK2_SIZE);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2207      	movs	r2, #7
 800123c:	4619      	mov	r1, r3
 800123e:	20e1      	movs	r0, #225	@ 0xe1
 8001240:	f000 fa00 	bl	8001644 <BME280_HAL_SPI_Read>

  // The next operations rely heavily on datasheet table 16: Compensation parameter storage, naming and data type.

  // Combine the bytes read from the calibration memory into 16-bit integers for temperature
  dig_T1 = combineBytes(calibDataBuffer1[DIG_T1_MSB_INDEX], calibDataBuffer1[DIG_T1_LSB_INDEX]);
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffa2 	bl	8001194 <combineBytes>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <calibrationParams+0xc4>)
 8001256:	801a      	strh	r2, [r3, #0]
  dig_T2 = combineBytes(calibDataBuffer1[DIG_T2_MSB_INDEX], calibDataBuffer1[DIG_T2_LSB_INDEX]);
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	7bba      	ldrb	r2, [r7, #14]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff98 	bl	8001194 <combineBytes>
 8001264:	4603      	mov	r3, r0
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b20      	ldr	r3, [pc, #128]	@ (80012ec <calibrationParams+0xc8>)
 800126a:	801a      	strh	r2, [r3, #0]
  dig_T3 = combineBytes(calibDataBuffer1[DIG_T3_MSB_INDEX], calibDataBuffer1[DIG_T3_LSB_INDEX]);
 800126c:	7c7b      	ldrb	r3, [r7, #17]
 800126e:	7c3a      	ldrb	r2, [r7, #16]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff8e 	bl	8001194 <combineBytes>
 8001278:	4603      	mov	r3, r0
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <calibrationParams+0xcc>)
 800127e:	801a      	strh	r2, [r3, #0]

  // Extract data for first trimming humidity value (dig_H1)
  dig_H1 = calibDataBuffer1[DIG_H1_INDEX];
 8001280:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <calibrationParams+0xd0>)
 8001286:	701a      	strb	r2, [r3, #0]

  dig_H2 = combineBytes(calibDataBuffer2[DIG_H2_MSB_INDEX], calibDataBuffer2[DIG_H2_LSB_INDEX]);
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	793a      	ldrb	r2, [r7, #4]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff80 	bl	8001194 <combineBytes>
 8001294:	4603      	mov	r3, r0
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <calibrationParams+0xd4>)
 800129a:	801a      	strh	r2, [r3, #0]
  dig_H3 = calibDataBuffer2[DIG_H3_INDEX];
 800129c:	79ba      	ldrb	r2, [r7, #6]
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <calibrationParams+0xd8>)
 80012a0:	701a      	strb	r2, [r3, #0]

  // For dig_H4, special bit manipulations are required to combine parts of two different bytes
  dig_H4 = (calibDataBuffer2[DIG_H4_MSB_INDEX] << 4) | extractBits(calibDataBuffer2[DIG_H4_LSB_INDEX], 0x0F, 0);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	b21c      	sxth	r4, r3
 80012a8:	7a3b      	ldrb	r3, [r7, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	210f      	movs	r1, #15
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff86 	bl	80011c0 <extractBits>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4323      	orrs	r3, r4
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <calibrationParams+0xdc>)
 80012be:	801a      	strh	r2, [r3, #0]

  // For dig_H5, special bit manipulations are required to combine parts of two different bytes
  dig_H5 = (calibDataBuffer2[DIG_H5_MSB_INDEX] << 4) | (calibDataBuffer2[DIG_H5_LSB_INDEX] >> 4);
 80012c0:	7a3b      	ldrb	r3, [r7, #8]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7a7b      	ldrb	r3, [r7, #9]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <calibrationParams+0xe0>)
 80012d4:	801a      	strh	r2, [r3, #0]

  // Store the final humidity calibration value directly from the corresponding byte
  dig_H6 = calibDataBuffer2[DIG_H6_INDEX];
 80012d6:	7abb      	ldrb	r3, [r7, #10]
 80012d8:	b25a      	sxtb	r2, r3
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <calibrationParams+0xe4>)
 80012dc:	701a      	strb	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	372c      	adds	r7, #44	@ 0x2c
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200002a4 	.word	0x200002a4
 80012ec:	200002a6 	.word	0x200002a6
 80012f0:	200002a8 	.word	0x200002a8
 80012f4:	200002aa 	.word	0x200002aa
 80012f8:	200002ac 	.word	0x200002ac
 80012fc:	200002ae 	.word	0x200002ae
 8001300:	200002b0 	.word	0x200002b0
 8001304:	200002b2 	.word	0x200002b2
 8001308:	200002b4 	.word	0x200002b4

0800130c <BME280_compensate_T_int32>:
 *         t_fine carries fine temperature as global value for BME280_compensate_H_int32 function to process its return humidity value.
 * @param  BME280_S32_t adc_T: Raw ADC temperature value.
 * @retval BME280_S32_t: Compensated temperature value.
 */
static BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  // Ensure that adc_T is within the valid 20-bit range (since temperature is typically represented by a 20-bit value).
  if (adc_T < 0 || adc_T > 0xFFFFF) // 20-bit range check
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db03      	blt.n	8001322 <BME280_compensate_T_int32+0x16>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001320:	db01      	blt.n	8001326 <BME280_compensate_T_int32+0x1a>
  {
    API_BME280_ErrorHandler();
 8001322:	f000 f95b 	bl	80015dc <API_BME280_ErrorHandler>
  }

  BME280_S32_t var1, var2, T;
  var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	10da      	asrs	r2, r3, #3
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <BME280_compensate_T_int32+0x80>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <BME280_compensate_T_int32+0x84>)
 8001334:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	12db      	asrs	r3, r3, #11
 800133e:	617b      	str	r3, [r7, #20]
  var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	111b      	asrs	r3, r3, #4
 8001344:	4a11      	ldr	r2, [pc, #68]	@ (800138c <BME280_compensate_T_int32+0x80>)
 8001346:	8812      	ldrh	r2, [r2, #0]
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	1112      	asrs	r2, r2, #4
 800134e:	490f      	ldr	r1, [pc, #60]	@ (800138c <BME280_compensate_T_int32+0x80>)
 8001350:	8809      	ldrh	r1, [r1, #0]
 8001352:	1a52      	subs	r2, r2, r1
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	131b      	asrs	r3, r3, #12
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <BME280_compensate_T_int32+0x88>)
 800135c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	139b      	asrs	r3, r3, #14
 8001366:	613b      	str	r3, [r7, #16]
  t_fine = var1 + var2;
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4413      	add	r3, r2
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <BME280_compensate_T_int32+0x8c>)
 8001370:	6013      	str	r3, [r2, #0]
  T = (t_fine * 5 + 128) >> 8;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <BME280_compensate_T_int32+0x8c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3380      	adds	r3, #128	@ 0x80
 800137e:	121b      	asrs	r3, r3, #8
 8001380:	60fb      	str	r3, [r7, #12]
  return T;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200002a4 	.word	0x200002a4
 8001390:	200002a6 	.word	0x200002a6
 8001394:	200002a8 	.word	0x200002a8
 8001398:	200002c0 	.word	0x200002c0

0800139c <BME280_compensate_H_int32>:
 *         For example, an output value of “47445” represents 47445/1024 = 46.333 %RH.
 * @param  BME280_S32_t adc_H: Raw ADC humidity value.
 * @retval BME280_U32_t: Compensated humidity value.
 */
static BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  // Ensure that adc_H is within the valid 16-bit range.
  if (adc_H < 0 || adc_H > 0xFFFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db03      	blt.n	80013b2 <BME280_compensate_H_int32+0x16>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b0:	db01      	blt.n	80013b6 <BME280_compensate_H_int32+0x1a>
  {
    API_BME280_ErrorHandler();
 80013b2:	f000 f913 	bl	80015dc <API_BME280_ErrorHandler>
  }

  BME280_S32_t v_x1_u32r;
  v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <BME280_compensate_H_int32+0xcc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80013be:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) * v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	039a      	lsls	r2, r3, #14
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <BME280_compensate_H_int32+0xd0>)
 80013c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ca:	051b      	lsls	r3, r3, #20
 80013cc:	1ad2      	subs	r2, r2, r3
 80013ce:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <BME280_compensate_H_int32+0xd4>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	4619      	mov	r1, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80013e2:	13db      	asrs	r3, r3, #15
 80013e4:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <BME280_compensate_H_int32+0xd8>)
 80013e6:	f992 2000 	ldrsb.w	r2, [r2]
 80013ea:	4611      	mov	r1, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	fb01 f202 	mul.w	r2, r1, r2
 80013f2:	1292      	asrs	r2, r2, #10
 80013f4:	4920      	ldr	r1, [pc, #128]	@ (8001478 <BME280_compensate_H_int32+0xdc>)
 80013f6:	7809      	ldrb	r1, [r1, #0]
 80013f8:	4608      	mov	r0, r1
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	fb00 f101 	mul.w	r1, r0, r1
 8001400:	12c9      	asrs	r1, r1, #11
 8001402:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001406:	fb01 f202 	mul.w	r2, r1, r2
 800140a:	1292      	asrs	r2, r2, #10
 800140c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001410:	491a      	ldr	r1, [pc, #104]	@ (800147c <BME280_compensate_H_int32+0xe0>)
 8001412:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001416:	fb01 f202 	mul.w	r2, r1, r2
 800141a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800141e:	1392      	asrs	r2, r2, #14
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	13db      	asrs	r3, r3, #15
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	13d2      	asrs	r2, r2, #15
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	11db      	asrs	r3, r3, #7
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <BME280_compensate_H_int32+0xe4>)
 8001436:	7812      	ldrb	r2, [r2, #0]
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	111b      	asrs	r3, r3, #4
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800144a:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001452:	bfa8      	it	ge
 8001454:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001458:	60fb      	str	r3, [r7, #12]
  return (BME280_U32_t)(v_x1_u32r >> 12);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	131b      	asrs	r3, r3, #12
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002c0 	.word	0x200002c0
 800146c:	200002b0 	.word	0x200002b0
 8001470:	200002b2 	.word	0x200002b2
 8001474:	200002b4 	.word	0x200002b4
 8001478:	200002ae 	.word	0x200002ae
 800147c:	200002ac 	.word	0x200002ac
 8001480:	200002aa 	.word	0x200002aa

08001484 <API_BME280_Init>:
 * @brief  Initializes the BME280 sensor by configuring its control registers and reading calibration parameters.
 * @param  None
 * @retval None
 */
void API_BME280_Init()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
  calibrationParams();
 800148a:	f7ff fecb 	bl	8001224 <calibrationParams>

  /* 5.4.2 The "reset" register contains the soft reset word reset[7:0].
  If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
  The readout value is 0x00.*/
  uint8_t CmdReset = 0xB6;
 800148e:	23b6      	movs	r3, #182	@ 0xb6
 8001490:	71fb      	strb	r3, [r7, #7]

  /* 4.3. Register 0xF2 “ctrl_hum”. The “ctrl_hum” register sets the humidity data acquisition options of the device.
   * For this system I chose humidity at oversampling x 16.*/
  uint8_t CmdCtrlHum = 0x05;
 8001492:	2305      	movs	r3, #5
 8001494:	71bb      	strb	r3, [r7, #6]
   * bit-7, bit-6, bit-5, bit-4, bit-3, bit-2, bit-1, bit-0
   * 0b10100011
   * Temperature at oversampling x 16.
   * Pressure is not necessary since we will not use it in this system.
   * Mode is Normal.*/
  uint8_t CmdCtrlMeasr = 0xA3;
 8001496:	23a3      	movs	r3, #163	@ 0xa3
 8001498:	717b      	strb	r3, [r7, #5]
   * 0b00011000
   * For this system I chose ts_tandby [ms] = 0.5 ms (bits 7->5 = 000). Chose this configuration so we have the smallest time interval between measurements. Making the system more reactive to changes in temperature.
   * See in datasheet section 3.3.4 Normal mode (figure 5: Normal mode timing diagram).
   * For this system I chose a filter coefficient of 8 (bits 4->2 = 011. When the IIR filter is enabled, the temperature resolution is 20 bit (see section 3.4.3 for more info on temperature measurement).
   * For this system we disable 3-wire SPI interface when bit-0 set to ‘0’. Please check section 6.3 for more information on this.*/
  uint8_t CmdConfig = 0x18;
 800149a:	2318      	movs	r3, #24
 800149c:	713b      	strb	r3, [r7, #4]

  // Write reset sequence to the reset register
  BME280_HAL_SPI_Write(BME280_RESET_REG, &CmdReset, CMD_WRITE_SIZE);
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	2201      	movs	r2, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	20e0      	movs	r0, #224	@ 0xe0
 80014a6:	f000 f89f 	bl	80015e8 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 80014aa:	2064      	movs	r0, #100	@ 0x64
 80014ac:	f000 f8f8 	bl	80016a0 <BME280_HAL_Delay>

  // Write control settings to the control registers
  BME280_HAL_SPI_Write(BME280_CTRL_HUM_REG, &CmdCtrlHum, CMD_WRITE_SIZE);
 80014b0:	1dbb      	adds	r3, r7, #6
 80014b2:	2201      	movs	r2, #1
 80014b4:	4619      	mov	r1, r3
 80014b6:	20f2      	movs	r0, #242	@ 0xf2
 80014b8:	f000 f896 	bl	80015e8 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 80014bc:	2064      	movs	r0, #100	@ 0x64
 80014be:	f000 f8ef 	bl	80016a0 <BME280_HAL_Delay>

  BME280_HAL_SPI_Write(BME280_CTRL_MEASR_REG, &CmdCtrlMeasr, CMD_WRITE_SIZE);
 80014c2:	1d7b      	adds	r3, r7, #5
 80014c4:	2201      	movs	r2, #1
 80014c6:	4619      	mov	r1, r3
 80014c8:	20f4      	movs	r0, #244	@ 0xf4
 80014ca:	f000 f88d 	bl	80015e8 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 80014ce:	2064      	movs	r0, #100	@ 0x64
 80014d0:	f000 f8e6 	bl	80016a0 <BME280_HAL_Delay>

  BME280_HAL_SPI_Write(BME280_CTRL_CONFIG_REG, &CmdConfig, CMD_WRITE_SIZE);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2201      	movs	r2, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	20f5      	movs	r0, #245	@ 0xf5
 80014dc:	f000 f884 	bl	80015e8 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 80014e0:	2064      	movs	r0, #100	@ 0x64
 80014e2:	f000 f8dd 	bl	80016a0 <BME280_HAL_Delay>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <API_BME280_ReadAndProcess>:
 * @brief  Reads raw temperature and humidity data from the BME280 sensor, applies compensation formulas, and converts the data to human readable units.
 * @param  None
 * @retval uint8_t: Returns 0 if the read operation is successful, 1 if an error occurs.
 */
uint8_t API_BME280_ReadAndProcess()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
  uint8_t sensorDataBuffer[8];
  uint8_t chip_Id;

  BME280_HAL_SPI_Read(CHIP_ID_REG, &chip_Id, CHIP_ID_BLOCK_SIZE);
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	2201      	movs	r2, #1
 80014fa:	4619      	mov	r1, r3
 80014fc:	20d0      	movs	r0, #208	@ 0xd0
 80014fe:	f000 f8a1 	bl	8001644 <BME280_HAL_SPI_Read>

  if (chip_Id == BME280_CHIP_ID)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b60      	cmp	r3, #96	@ 0x60
 8001506:	d139      	bne.n	800157c <API_BME280_ReadAndProcess+0x8c>
     *
     * BYTE 7 | BYTE 6 | BYTE 5 | BYTE 4 | BYTE 3 | BYTE 2 | BYTE 1 | BYTE 0
     * H_LSB    H_MSB    T_XLSB   T_LSB    T_MSB    P_XLSB   P_LSB    P_MSB
     * */

    BME280_HAL_SPI_Read(PRESSURE_MSB_REG, sensorDataBuffer, RAW_OUTPUT_DATA_SIZE);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2208      	movs	r2, #8
 800150e:	4619      	mov	r1, r3
 8001510:	20f7      	movs	r0, #247	@ 0xf7
 8001512:	f000 f897 	bl	8001644 <BME280_HAL_SPI_Read>

    // The BME280 output consists of the ADC output values that have to be compensated afterwards.

    // Combine the bytes to form the 20-bit temperature value (temp_adc).
    temp_adc = (sensorDataBuffer[TEMP_MSB_INDEX] << TEMP_MSB_SHIFT) |
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	031a      	lsls	r2, r3, #12
               (sensorDataBuffer[TEMP_LSB_INDEX] << TEMP_LSB_SHIFT) |
 800151a:	7b3b      	ldrb	r3, [r7, #12]
 800151c:	011b      	lsls	r3, r3, #4
    temp_adc = (sensorDataBuffer[TEMP_MSB_INDEX] << TEMP_MSB_SHIFT) |
 800151e:	4313      	orrs	r3, r2
               (sensorDataBuffer[TEMP_XLSB_INDEX] >> TEMP_XLSB_SHIFT);
 8001520:	7b7a      	ldrb	r2, [r7, #13]
 8001522:	0912      	lsrs	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
               (sensorDataBuffer[TEMP_LSB_INDEX] << TEMP_LSB_SHIFT) |
 8001526:	4313      	orrs	r3, r2
    temp_adc = (sensorDataBuffer[TEMP_MSB_INDEX] << TEMP_MSB_SHIFT) |
 8001528:	4a18      	ldr	r2, [pc, #96]	@ (800158c <API_BME280_ReadAndProcess+0x9c>)
 800152a:	6013      	str	r3, [r2, #0]

    // Apply compensation formula to temperature ADC value.
    bme280_temperature = ((float)BME280_compensate_T_int32(temp_adc)) / TEMPERATURE_SCALE_FACTOR;
 800152c:	4b17      	ldr	r3, [pc, #92]	@ (800158c <API_BME280_ReadAndProcess+0x9c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff feeb 	bl	800130c <BME280_compensate_T_int32>
 8001536:	ee07 0a90 	vmov	s15, r0
 800153a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153e:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001590 <API_BME280_ReadAndProcess+0xa0>
 8001542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <API_BME280_ReadAndProcess+0xa4>)
 8001548:	edc3 7a00 	vstr	s15, [r3]

    // Combine the bytes to form the 16-bit humidity value (hum_adc).
    hum_adc = (sensorDataBuffer[HUM_MSB_INDEX] << HUM_MSB_SHIFT) |
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	021b      	lsls	r3, r3, #8
              sensorDataBuffer[HUM_LSB_INDEX];
 8001550:	7bfa      	ldrb	r2, [r7, #15]
    hum_adc = (sensorDataBuffer[HUM_MSB_INDEX] << HUM_MSB_SHIFT) |
 8001552:	4313      	orrs	r3, r2
 8001554:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <API_BME280_ReadAndProcess+0xa8>)
 8001556:	6013      	str	r3, [r2, #0]

    // Apply compensation formula to humidity ADC value.
    bme280_humidity = ((float)BME280_compensate_H_int32(hum_adc)) / HUMIDITY_SCALE_FACTOR;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <API_BME280_ReadAndProcess+0xa8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff1d 	bl	800139c <BME280_compensate_H_int32>
 8001562:	ee07 0a90 	vmov	s15, r0
 8001566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800156a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800159c <API_BME280_ReadAndProcess+0xac>
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <API_BME280_ReadAndProcess+0xb0>)
 8001574:	edc3 7a00 	vstr	s15, [r3]

    return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e002      	b.n	8001582 <API_BME280_ReadAndProcess+0x92>
  }
  else
  {
    errorLedSignal();
 800157c:	f7ff fe3b 	bl	80011f6 <errorLedSignal>
    return 1;
 8001580:	2301      	movs	r3, #1
  }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002b8 	.word	0x200002b8
 8001590:	42c80000 	.word	0x42c80000
 8001594:	2000029c 	.word	0x2000029c
 8001598:	200002bc 	.word	0x200002bc
 800159c:	44800000 	.word	0x44800000
 80015a0:	200002a0 	.word	0x200002a0

080015a4 <API_BME280_GetTemperature>:
 * @note   This function returns the temperature in degrees Celsius, which was calculated
 *         using the BME280 compensation formulas during the last sensor read.
 * @param  None
 * @retval float: The latest temperature value in degrees Celsius.
 */
float API_BME280_GetTemperature(void) {
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
    return bme280_temperature;
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <API_BME280_GetTemperature+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	ee07 3a90 	vmov	s15, r3
}
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	2000029c 	.word	0x2000029c

080015c0 <API_BME280_GetHumidity>:
 * @note   This function returns the relative humidity percentage, which was calculated
 *         using the BME280 compensation formulas during the last sensor read.
 * @param  None
 * @retval float: The latest humidity value in percentage (%RH).
 */
float API_BME280_GetHumidity(void) {
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
    return bme280_humidity;
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <API_BME280_GetHumidity+0x18>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	ee07 3a90 	vmov	s15, r3
}
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	200002a0 	.word	0x200002a0

080015dc <API_BME280_ErrorHandler>:
/**
 * @brief  This function is executed in case of error occurrence. Program will get stuck in this part of the code. Indicating major BME280 error.
 * @retval None
 */
void API_BME280_ErrorHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  while (1)
  {
    errorLedSignal();
 80015e0:	f7ff fe09 	bl	80011f6 <errorLedSignal>
 80015e4:	e7fc      	b.n	80015e0 <API_BME280_ErrorHandler+0x4>
	...

080015e8 <BME280_HAL_SPI_Write>:
 * @param  uint8_t *data: Pointer to the data buffer that holds the data to be written.
 * @param  uint16_t size: The size of the data buffer in bytes.
 * @retval None.
 */
void BME280_HAL_SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80bb      	strh	r3, [r7, #4]
  uint8_t regAddress = reg & WRITE_CMD_BIT; // Apply the write command mask.
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 8001602:	2200      	movs	r2, #0
 8001604:	2108      	movs	r1, #8
 8001606:	480d      	ldr	r0, [pc, #52]	@ (800163c <BME280_HAL_SPI_Write+0x54>)
 8001608:	f000 fed8 	bl	80023bc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 800160c:	f107 010f 	add.w	r1, r7, #15
 8001610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001614:	2201      	movs	r2, #1
 8001616:	480a      	ldr	r0, [pc, #40]	@ (8001640 <BME280_HAL_SPI_Write+0x58>)
 8001618:	f002 fe09 	bl	800422e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800161c:	88ba      	ldrh	r2, [r7, #4]
 800161e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	4806      	ldr	r0, [pc, #24]	@ (8001640 <BME280_HAL_SPI_Write+0x58>)
 8001626:	f002 fe02 	bl	800422e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4803      	ldr	r0, [pc, #12]	@ (800163c <BME280_HAL_SPI_Write+0x54>)
 8001630:	f000 fec4 	bl	80023bc <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020400 	.word	0x40020400
 8001640:	20000098 	.word	0x20000098

08001644 <BME280_HAL_SPI_Read>:
 * @param  uint8_t *data: Pointer to the data buffer where the read data will be stored.
 * @param  uint16_t size: The size of the data buffer in bytes.
 * @retval None.
 */
void BME280_HAL_SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	80bb      	strh	r3, [r7, #4]
  uint8_t regAddress = reg | READ_CMD_BIT; // Apply the read command mask.
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800165a:	b2db      	uxtb	r3, r3
 800165c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 800165e:	2200      	movs	r2, #0
 8001660:	2108      	movs	r1, #8
 8001662:	480d      	ldr	r0, [pc, #52]	@ (8001698 <BME280_HAL_SPI_Read+0x54>)
 8001664:	f000 feaa 	bl	80023bc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), SPI_TX_RX_TIMEOUT);
 8001668:	f107 010f 	add.w	r1, r7, #15
 800166c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001670:	2201      	movs	r2, #1
 8001672:	480a      	ldr	r0, [pc, #40]	@ (800169c <BME280_HAL_SPI_Read+0x58>)
 8001674:	f002 fddb 	bl	800422e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, data, size, SPI_TX_RX_TIMEOUT);
 8001678:	88ba      	ldrh	r2, [r7, #4]
 800167a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	4806      	ldr	r0, [pc, #24]	@ (800169c <BME280_HAL_SPI_Read+0x58>)
 8001682:	f002 ff17 	bl	80044b4 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 8001686:	2201      	movs	r2, #1
 8001688:	2108      	movs	r1, #8
 800168a:	4803      	ldr	r0, [pc, #12]	@ (8001698 <BME280_HAL_SPI_Read+0x54>)
 800168c:	f000 fe96 	bl	80023bc <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40020400 	.word	0x40020400
 800169c:	20000098 	.word	0x20000098

080016a0 <BME280_HAL_Delay>:
 *  @brief  Provides a delay for a specified number of milliseconds.
 * @param  delay: The amount of time, in milliseconds, to delay.
 * @retval None
 */
void BME280_HAL_Delay(uint32_t delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fbd1 	bl	8001e50 <HAL_Delay>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <BME280_HAL_Blink>:
 * @brief  Toggles the state of the specified LED.
 * @param  Led: Specifies the LED to be toggled. This parameter can be one of the LED identifiers defined in the board support package (BSP), such as `LED2`, `LED3`, etc.
 * @retval None
 */
void BME280_HAL_Blink(Led_TypeDef Led)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Toggle(Led);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fb38 	bl	8001d38 <BSP_LED_Toggle>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <Clock_Error_Handler>:
 *         This function enters an infinite loop, indicating a critical error.
 * @param  None
 * @retval None
 */
void Clock_Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <Clock_Error_Handler+0x4>

080016d8 <ClockInit>:
 * @brief  Initializes the RTC clock with a predefined time and date.
 * @param  None
 * @retval None
 */
void ClockInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    // Set initial time values (in BCD format)
    sTime.Hours = 0x01;
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <ClockInit+0x68>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0x20;
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <ClockInit+0x68>)
 80016e4:	2220      	movs	r2, #32
 80016e6:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0x00;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <ClockInit+0x68>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <ClockInit+0x68>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <ClockInit+0x68>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]

    // Set the RTC time, check for errors
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016fa:	2201      	movs	r2, #1
 80016fc:	4910      	ldr	r1, [pc, #64]	@ (8001740 <ClockInit+0x68>)
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <ClockInit+0x6c>)
 8001700:	f002 fa83 	bl	8003c0a <HAL_RTC_SetTime>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <ClockInit+0x36>
    {
        Clock_Error_Handler();
 800170a:	f7ff ffe1 	bl	80016d0 <Clock_Error_Handler>
    }

    // Set initial date values (in BCD format)
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <ClockInit+0x70>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_AUGUST;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <ClockInit+0x70>)
 8001716:	2208      	movs	r2, #8
 8001718:	705a      	strb	r2, [r3, #1]
    sDate.Date = 0x05;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <ClockInit+0x70>)
 800171c:	2205      	movs	r2, #5
 800171e:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0x24;
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <ClockInit+0x70>)
 8001722:	2224      	movs	r2, #36	@ 0x24
 8001724:	70da      	strb	r2, [r3, #3]

    // Set the RTC date, check for errors
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001726:	2201      	movs	r2, #1
 8001728:	4907      	ldr	r1, [pc, #28]	@ (8001748 <ClockInit+0x70>)
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <ClockInit+0x6c>)
 800172c:	f002 fb65 	bl	8003dfa <HAL_RTC_SetDate>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <ClockInit+0x62>
    {
        Clock_Error_Handler();
 8001736:	f7ff ffcb 	bl	80016d0 <Clock_Error_Handler>
    }
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002c4 	.word	0x200002c4
 8001744:	20000138 	.word	0x20000138
 8001748:	200002d8 	.word	0x200002d8

0800174c <ClockUpdateTimeDate>:
 * @brief  Updates the global time and date variables with the current RTC time and date.
 * @param  None
 * @retval None
 */
void ClockUpdateTimeDate(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    // Get the current time from the RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001750:	2201      	movs	r2, #1
 8001752:	4905      	ldr	r1, [pc, #20]	@ (8001768 <ClockUpdateTimeDate+0x1c>)
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <ClockUpdateTimeDate+0x20>)
 8001756:	f002 faf2 	bl	8003d3e <HAL_RTC_GetTime>

    // Get the current date from the RTC
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800175a:	2201      	movs	r2, #1
 800175c:	4904      	ldr	r1, [pc, #16]	@ (8001770 <ClockUpdateTimeDate+0x24>)
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <ClockUpdateTimeDate+0x20>)
 8001760:	f002 fbcf 	bl	8003f02 <HAL_RTC_GetDate>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200002c4 	.word	0x200002c4
 800176c:	20000138 	.word	0x20000138
 8001770:	200002d8 	.word	0x200002d8

08001774 <delayInit>:
 * @param  delay is a pointer to the delay structure
 * @param  duration: duration of delay in milliseconds
 * @retval None
 */
void delayInit(delay_t *delay, tick_t duration)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	if (delay != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <delayInit+0x22>
	{
		delay->startTime = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		delay->running = false;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	721a      	strb	r2, [r3, #8]
		delay->duration = duration;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	605a      	str	r2, [r3, #4]
	}
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <delayRead>:
 * @brief  Checks if specified delay duration is done
 * @param  delay is a pointer to the delay structure
 * @retval returns true if the duration has elapsed, if not returns false
 */
bool_t delayRead(delay_t *delay)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	if (delay != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d028      	beq.n	8001802 <delayRead+0x60>
	{
		if (!delay->running)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7a1b      	ldrb	r3, [r3, #8]
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <delayRead+0x30>
		{
			delay->startTime = DELAY_HAL_GetTick();
 80017be:	f000 f825 	bl	800180c <DELAY_HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	721a      	strb	r2, [r3, #8]
			return false;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e018      	b.n	8001804 <delayRead+0x62>
		}
		if (delay->running)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d013      	beq.n	8001802 <delayRead+0x60>
		{
			tick_t now = DELAY_HAL_GetTick();
 80017da:	f000 f817 	bl	800180c <DELAY_HAL_GetTick>
 80017de:	60f8      	str	r0, [r7, #12]
			tick_t timeElapsed = now - delay->startTime;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	60bb      	str	r3, [r7, #8]
			if ((timeElapsed >= delay->duration))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d304      	bcc.n	80017fe <delayRead+0x5c>
			{
				delay->running = false;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	721a      	strb	r2, [r3, #8]
				return true;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e002      	b.n	8001804 <delayRead+0x62>
			}
			return false;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <delayRead+0x62>
		}
	}
	return false; // fallback
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <DELAY_HAL_GetTick>:
 *         which increments every millisecond. It is typically used for implementing delays or measuring time intervals.
 * @param  None
 * @retval uint32_t: The current tick value in milliseconds.
 */
uint32_t DELAY_HAL_GetTick(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001810:	f000 fb12 	bl	8001e38 <HAL_GetTick>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}

0800181a <sendNibbleToLCD>:
 * @param data: The data to send.
 * @param mode: The mode (command/data). Must be LCD_CMD_CONTROL_MODE or LCD_CMD_DATA_MODE.
 * @retval None.
 */
static void sendNibbleToLCD(uint8_t data, bool mode)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	460a      	mov	r2, r1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	4613      	mov	r3, r2
 8001828:	71bb      	strb	r3, [r7, #6]
    if (mode != LCD_CMD_CONTROL_MODE && mode != LCD_CMD_DATA_MODE)
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <sendNibbleToLCD+0x26>
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	f083 0301 	eor.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <sendNibbleToLCD+0x26>
    {
        errorLedSignal();
 800183c:	f000 f88a 	bl	8001954 <errorLedSignal>
    }

    LCD_HAL_I2C_Write(data | mode | LCD_ENABLE_PIN | LCD_BACKLIGHT);
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4313      	orrs	r3, r2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f043 030c 	orr.w	r3, r3, #12
 800184e:	b25b      	sxtb	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f96c 	bl	8001b30 <LCD_HAL_I2C_Write>
    LCD_HAL_Delay(1 * MILLISECOND);
 8001858:	2001      	movs	r0, #1
 800185a:	f000 f97d 	bl	8001b58 <LCD_HAL_Delay>
    LCD_HAL_I2C_Write(data | mode | LCD_BACKLIGHT);
 800185e:	79ba      	ldrb	r2, [r7, #6]
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4313      	orrs	r3, r2
 8001864:	b2db      	uxtb	r3, r3
 8001866:	b25b      	sxtb	r3, r3
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	b25b      	sxtb	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f95d 	bl	8001b30 <LCD_HAL_I2C_Write>
    LCD_HAL_Delay(1 * MILLISECOND);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 f96e 	bl	8001b58 <LCD_HAL_Delay>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <sendNibbleAndPause>:
 * @param pause: The delay to apply after sending the nibble. Must be a reasonable delay value.
 * @param mode: The mode (command/data). Must be LCD_CMD_CONTROL_MODE or LCD_CMD_DATA_MODE.
 * @retval None.
 */
static void sendNibbleAndPause(uint8_t data, bool mode, uint8_t delay)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	717b      	strb	r3, [r7, #5]
    if (mode != LCD_CMD_CONTROL_MODE && mode != LCD_CMD_DATA_MODE)
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <sendNibbleAndPause+0x28>
 800189c:	79bb      	ldrb	r3, [r7, #6]
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <sendNibbleAndPause+0x28>
    {
        errorLedSignal();
 80018a8:	f000 f854 	bl	8001954 <errorLedSignal>
    }

    sendNibbleToLCD(data, mode);
 80018ac:	79ba      	ldrb	r2, [r7, #6]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ffb1 	bl	800181a <sendNibbleToLCD>
    LCD_HAL_Delay(delay);
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f94c 	bl	8001b58 <LCD_HAL_Delay>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <writeDataToLCD>:
 * @param data: The data to send. Must be a valid byte value.
 * @param mode: The mode (command/data). Must be LCD_CMD_CONTROL_MODE or LCD_CMD_DATA_MODE.
 * @retval None.
 */
static void writeDataToLCD(uint8_t data, bool mode)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
    if (mode != LCD_CMD_CONTROL_MODE && mode != LCD_CMD_DATA_MODE)
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <writeDataToLCD+0x26>
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <writeDataToLCD+0x26>
    {
        errorLedSignal();
 80018ea:	f000 f833 	bl	8001954 <errorLedSignal>
    }

    sendNibbleToLCD(data & LCD_HIGH_NIBBLE_MASK, mode);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f023 030f 	bic.w	r3, r3, #15
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	79ba      	ldrb	r2, [r7, #6]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff8d 	bl	800181a <sendNibbleToLCD>
    sendNibbleToLCD(data << LCD_LOW_NIBBLE_SHIFT, mode);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	b2db      	uxtb	r3, r3
 8001906:	79ba      	ldrb	r2, [r7, #6]
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff85 	bl	800181a <sendNibbleToLCD>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <executeLCDCommand>:
 * @brief Executes a command on the LCD.
 * @param command: The command to be sent. Must be a valid LCD command.
 * @retval None.
 */
static void executeLCDCommand(uint8_t command)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
    // Assume command is always valid as it comes from predefined constants
    writeDataToLCD(command, LCD_CMD_CONTROL_MODE);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ffce 	bl	80018c8 <writeDataToLCD>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <sendAsciiCharToLCD>:
 * @brief Sends an ASCII character to the LCD.
 * @param asciiChar: The character to send.
 * @retval None.
 */
static void sendAsciiCharToLCD(uint8_t asciiChar)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
    writeDataToLCD(asciiChar + ASCII_DIGIT_OFFSET, LCD_CMD_DATA_MODE);
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	3330      	adds	r3, #48	@ 0x30
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ffbe 	bl	80018c8 <writeDataToLCD>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <errorLedSignal>:
 * @brief  Flashes LED to signal an error in LCD operations.
 * @param  None
 * @retval None
 */
static void errorLedSignal(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
    for (int i = 0; i <= NUM_ERROR_LCD_BLINKS; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	e008      	b.n	8001972 <errorLedSignal+0x1e>
    {
        LCD_HAL_Blink(LED3); // Sensor error.
 8001960:	2002      	movs	r0, #2
 8001962:	f000 f904 	bl	8001b6e <LCD_HAL_Blink>
        LCD_HAL_Delay(MILLISECOND * 100);
 8001966:	2064      	movs	r0, #100	@ 0x64
 8001968:	f000 f8f6 	bl	8001b58 <LCD_HAL_Delay>
    for (int i = 0; i <= NUM_ERROR_LCD_BLINKS; i++)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b04      	cmp	r3, #4
 8001976:	ddf3      	ble.n	8001960 <errorLedSignal+0xc>
    }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <okLcdInitSignal>:
 * This function provides a visual indication that the LCD has been successfully initialized.
 * It toggles an LED (LED1) four times.
 * @retval None.
 */
static void okLcdInitSignal(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OK_INIT_LCD_BLINKS; i++) // LCD init OK blink signal
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	e008      	b.n	80019a0 <okLcdInitSignal+0x1e>
    {
        LCD_HAL_Blink(LED1);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f8ed 	bl	8001b6e <LCD_HAL_Blink>
        LCD_HAL_Delay(MILLISECOND);
 8001994:	2001      	movs	r0, #1
 8001996:	f000 f8df 	bl	8001b58 <LCD_HAL_Delay>
    for (int i = 0; i < NUM_OK_INIT_LCD_BLINKS; i++) // LCD init OK blink signal
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3301      	adds	r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	ddf3      	ble.n	800198e <okLcdInitSignal+0xc>
    }
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <API_LCD_Initialize>:
/**
 * @brief Initializes the LCD with the predefined commands.
 * @retval _Bool: Returns 0 on success.
 */
_Bool API_LCD_Initialize(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
    LCD_HAL_Delay(MILLISECOND * 20);
 80019b6:	2014      	movs	r0, #20
 80019b8:	f000 f8ce 	bl	8001b58 <LCD_HAL_Delay>

    sendNibbleAndPause(LCD_INIT_CMD_1, LCD_CMD_CONTROL_MODE, MILLISECOND * 10);
 80019bc:	220a      	movs	r2, #10
 80019be:	2100      	movs	r1, #0
 80019c0:	2030      	movs	r0, #48	@ 0x30
 80019c2:	f7ff ff5f 	bl	8001884 <sendNibbleAndPause>
    sendNibbleAndPause(LCD_INIT_CMD_1, LCD_CMD_CONTROL_MODE, MILLISECOND * 10);
 80019c6:	220a      	movs	r2, #10
 80019c8:	2100      	movs	r1, #0
 80019ca:	2030      	movs	r0, #48	@ 0x30
 80019cc:	f7ff ff5a 	bl	8001884 <sendNibbleAndPause>
    sendNibbleAndPause(LCD_INIT_CMD_1, LCD_CMD_CONTROL_MODE, MILLISECOND * 10);
 80019d0:	220a      	movs	r2, #10
 80019d2:	2100      	movs	r1, #0
 80019d4:	2030      	movs	r0, #48	@ 0x30
 80019d6:	f7ff ff55 	bl	8001884 <sendNibbleAndPause>
    sendNibbleAndPause(LCD_INIT_CMD_2, LCD_CMD_CONTROL_MODE, MILLISECOND * 10);
 80019da:	220a      	movs	r2, #10
 80019dc:	2100      	movs	r1, #0
 80019de:	2020      	movs	r0, #32
 80019e0:	f7ff ff50 	bl	8001884 <sendNibbleAndPause>

    for (uint8_t i = 0; i < sizeof(LCD_INIT_COMMANDS); i++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e008      	b.n	80019fc <API_LCD_Initialize+0x4c>
    {
        executeLCDCommand(LCD_INIT_COMMANDS[i]);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <API_LCD_Initialize+0x68>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff91 	bl	8001918 <executeLCDCommand>
    for (uint8_t i = 0; i < sizeof(LCD_INIT_COMMANDS); i++)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	3301      	adds	r3, #1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d9f3      	bls.n	80019ea <API_LCD_Initialize+0x3a>
    }

    okLcdInitSignal();
 8001a02:	f7ff ffbe 	bl	8001982 <okLcdInitSignal>

    LCD_HAL_Delay(MILLISECOND);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 f8a6 	bl	8001b58 <LCD_HAL_Delay>

    return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800571c 	.word	0x0800571c

08001a1c <API_LCD_SendData>:
 * @brief Sends data to the LCD.
 * @param data: The data to send. Must be a valid byte value.
 * @retval None.
 */
void API_LCD_SendData(uint8_t data)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
    writeDataToLCD(data, LCD_CMD_DATA_MODE);
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff4c 	bl	80018c8 <writeDataToLCD>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <API_LCD_SendBCDData>:
 * @brief Sends a BCD-encoded byte to the LCD. This function prepares and formats data.
 * @param data: The BCD data to send. Must be a valid BCD-encoded byte.
 * @retval None.
 */
void API_LCD_SendBCDData(uint8_t data)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    sendAsciiCharToLCD((data & BCD_HIGH_NIBBLE_MASK) >> BCD_HIGH_NIBBLE_SHIFT);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff73 	bl	8001934 <sendAsciiCharToLCD>
    sendAsciiCharToLCD(data & BCD_LOW_NIBBLE_MASK);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff6c 	bl	8001934 <sendAsciiCharToLCD>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <API_LCD_DisplayString>:
 *
 * @param text: Pointer to the null-terminated string to be displayed.
 * @retval None.
 */
void API_LCD_DisplayString(uint8_t *text)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    // Loop through each character in the string until the null terminator is encountered
    while (*text != EOL)
 8001a6c:	e007      	b.n	8001a7e <API_LCD_DisplayString+0x1a>
    {
        // Send the current character to the LCD
        API_LCD_SendData(*text);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ffd2 	bl	8001a1c <API_LCD_SendData>

        // Move to the next character in the string
        text++;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
    while (*text != EOL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f3      	bne.n	8001a6e <API_LCD_DisplayString+0xa>
    }
}
 8001a86:	bf00      	nop
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <API_LCD_SetCursorLine>:
 * @param position: The cursor position relative to the start of the line. Should be within the LCD's width.
 * @param lcd_line: Specifies the LCD line to set the cursor to (1 for the first line, 2 for the second line).
 * @retval None.
 */
void API_LCD_SetCursorLine(uint8_t position, uint8_t lcd_line)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
    if (lcd_line == LCD_FIRST_ROW_INDEX)
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <API_LCD_SetCursorLine+0x26>
    {
        executeLCDCommand(position | LCD_LINE_1);
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff32 	bl	8001918 <executeLCDCommand>
    }
    else if (lcd_line == LCD_SECOND_ROW_INDEX)
    {
        executeLCDCommand(position | LCD_LINE_2);
    }
}
 8001ab4:	e009      	b.n	8001aca <API_LCD_SetCursorLine+0x3a>
    else if (lcd_line == LCD_SECOND_ROW_INDEX)
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d106      	bne.n	8001aca <API_LCD_SetCursorLine+0x3a>
        executeLCDCommand(position | LCD_LINE_2);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff27 	bl	8001918 <executeLCDCommand>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <API_LCD_DisplayTwoMsgs>:
 * @param message1: Pointer to the first message string to be displayed.
 * @param message2: Pointer to the second message string to be displayed.
 * @retval None.
 */
void API_LCD_DisplayTwoMsgs(uint8_t init_pos, uint8_t lcd_line, uint8_t *message1, uint8_t *message2)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	4603      	mov	r3, r0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	73bb      	strb	r3, [r7, #14]
    API_LCD_SetCursorLine(init_pos, lcd_line);
 8001ae4:	7bba      	ldrb	r2, [r7, #14]
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffd0 	bl	8001a90 <API_LCD_SetCursorLine>
    API_LCD_DisplayString(message1);
 8001af0:	68b8      	ldr	r0, [r7, #8]
 8001af2:	f7ff ffb7 	bl	8001a64 <API_LCD_DisplayString>
    API_LCD_DisplayString(message2);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffb4 	bl	8001a64 <API_LCD_DisplayString>
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <API_LCD_DisplayMsg>:
 * @param lcd_line: Specifies the LCD line to display the message on (1 for the first line, 2 for the second line).
 * @param message: Pointer to the message string to be displayed.
 * @retval None.
 */
void API_LCD_DisplayMsg(uint8_t init_pos, uint8_t lcd_line, uint8_t *message)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	603a      	str	r2, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	460b      	mov	r3, r1
 8001b12:	71bb      	strb	r3, [r7, #6]
    API_LCD_SetCursorLine(init_pos, lcd_line);
 8001b14:	79ba      	ldrb	r2, [r7, #6]
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ffb8 	bl	8001a90 <API_LCD_SetCursorLine>
    API_LCD_DisplayString(message);
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f7ff ff9f 	bl	8001a64 <API_LCD_DisplayString>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <LCD_HAL_I2C_Write>:
 *         and assumes that the LCD is configured to operate with the provided I2C address.
 * @param  valor: The byte of data to be transmitted to the LCD.
 * @retval None
 */
void LCD_HAL_I2C_Write(uint8_t valor)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS << LCD_WRITE_CMD, &valor, sizeof(valor), HAL_MAX_DELAY);
 8001b3a:	1dfa      	adds	r2, r7, #7
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	214e      	movs	r1, #78	@ 0x4e
 8001b46:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <LCD_HAL_I2C_Write+0x24>)
 8001b48:	f000 fdb0 	bl	80026ac <HAL_I2C_Master_Transmit>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000044 	.word	0x20000044

08001b58 <LCD_HAL_Delay>:
 *  @brief  Provides a delay for a specified number of milliseconds.
 * @param  delay: The amount of time, in milliseconds, to delay.
 * @retval None
 */
void LCD_HAL_Delay(uint32_t delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f975 	bl	8001e50 <HAL_Delay>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <LCD_HAL_Blink>:
 * @brief  Toggles the state of the specified LED.
 * @param  Led: Specifies the LED to be toggled. This parameter can be one of the LED identifiers defined in the board support package (BSP), such as `LED2`, `LED3`, etc.
 * @retval None
 */
void LCD_HAL_Blink(Led_TypeDef Led)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Toggle(Led);
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f8dc 	bl	8001d38 <BSP_LED_Toggle>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <uartInit>:
 * @param  None.
 * @retval bool_t: returns true if initialization is successful, otherwise false.
 */

bool_t uartInit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  UartHandle.Instance = USARTx;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <uartInit+0x54>)
 8001b8e:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <uartInit+0x58>)
 8001b90:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate = 9600;
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <uartInit+0x54>)
 8001b94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b98:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <uartInit+0x54>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <uartInit+0x54>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity = UART_PARITY_ODD;
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <uartInit+0x54>)
 8001ba8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bac:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <uartInit+0x54>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <uartInit+0x54>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <uartInit+0x54>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]

  if (OK != UART_HAL_Init())
 8001bc0:	f000 f83a 	bl	8001c38 <UART_HAL_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <uartInit+0x46>
  {
    /* Initialization Error */
    return false;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e003      	b.n	8001bd6 <uartInit+0x4e>
  }

  uartSendString((uint8_t *)"UART init OK -> baud rate configured = 9600 | stopbits = 1 | parity = odd.\r\n");
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <uartInit+0x5c>)
 8001bd0:	f000 f80a 	bl	8001be8 <uartSendString>

  return true;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200000f0 	.word	0x200000f0
 8001be0:	40004800 	.word	0x40004800
 8001be4:	080056b4 	.word	0x080056b4

08001be8 <uartSendString>:
 * @brief  Send a null-terminated string via UART.
 * @param  uint8_t * pstring: pointer to the null-terminated string.
 * @retval None.
 */
void uartSendString(uint8_t *pstring)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if (NULL != pstring && MAXbUFFER > strlen((char *)pstring))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d014      	beq.n	8001c20 <uartSendString+0x38>
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe faf8 	bl	80001ec <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2bff      	cmp	r3, #255	@ 0xff
 8001c00:	d80e      	bhi.n	8001c20 <uartSendString+0x38>
  {
    if (OK != UART_HAL_Tx(pstring, strlen((char *)pstring)))
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe faf2 	bl	80001ec <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f826 	bl	8001c60 <UART_HAL_Tx>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <uartSendString+0x3e>
    {
      Error_Handler();
 8001c1a:	f000 f808 	bl	8001c2e <Error_Handler>
    if (OK != UART_HAL_Tx(pstring, strlen((char *)pstring)))
 8001c1e:	e002      	b.n	8001c26 <uartSendString+0x3e>
    }
  }
  else
    Error_Handler();
 8001c20:	f000 f805 	bl	8001c2e <Error_Handler>
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <Error_Handler>:
 * @brief  Handles errors by entering an infinite loop.
 * @param  None.
 * @retval None.
 */
static void Error_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  while (1)
 8001c32:	bf00      	nop
 8001c34:	e7fd      	b.n	8001c32 <Error_Handler+0x4>
	...

08001c38 <UART_HAL_Init>:
#include "API_uart_port.h"

uint8_t UART_HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = HAL_UART_Init(&UartHandle);
 8001c3e:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <UART_HAL_Init+0x24>)
 8001c40:	f003 f842 	bl	8004cc8 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
	if (HAL_OK != res) {
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <UART_HAL_Init+0x1a>
		return 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <UART_HAL_Init+0x1c>
	}
		return 0;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200000f0 	.word	0x200000f0

08001c60 <UART_HAL_Tx>:

uint8_t UART_HAL_Tx(const uint8_t *pstring, uint16_t size){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef res = HAL_UART_Transmit(&UartHandle, pstring, size, TxTIMEOUT);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4807      	ldr	r0, [pc, #28]	@ (8001c94 <UART_HAL_Tx+0x34>)
 8001c76:	f003 f877 	bl	8004d68 <HAL_UART_Transmit>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != res) {
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <UART_HAL_Tx+0x28>
		return 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <UART_HAL_Tx+0x2a>
	}
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200000f0 	.word	0x200000f0

08001c98 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10e      	bne.n	8001cc6 <BSP_LED_Init+0x2e>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <BSP_LED_Init+0x94>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <BSP_LED_Init+0x94>)
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <BSP_LED_Init+0x94>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	e00d      	b.n	8001ce2 <BSP_LED_Init+0x4a>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <BSP_LED_Init+0x94>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <BSP_LED_Init+0x94>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <BSP_LED_Init+0x94>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <BSP_LED_Init+0x98>)
 8001ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <BSP_LED_Init+0x9c>)
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	f107 0214 	add.w	r2, r7, #20
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f9ac 	bl	8002064 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <BSP_LED_Init+0x9c>)
 8001d10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <BSP_LED_Init+0x98>)
 8001d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f000 fb4c 	bl	80023bc <HAL_GPIO_WritePin>
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	@ 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08005724 	.word	0x08005724
 8001d34:	20000008 	.word	0x20000008

08001d38 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <BSP_LED_Toggle+0x2c>)
 8001d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4906      	ldr	r1, [pc, #24]	@ (8001d68 <BSP_LED_Toggle+0x30>)
 8001d4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f000 fb4a 	bl	80023ee <HAL_GPIO_TogglePin>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	08005724 	.word	0x08005724

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	@ (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f931 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7fe fdc0 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f93b 	bl	800204a <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dec:	f000 f911 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	@ (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000004 	.word	0x20000004
 8001e08:	20000018 	.word	0x20000018
 8001e0c:	20000014 	.word	0x20000014

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000018 	.word	0x20000018
 8001e34:	200002dc 	.word	0x200002dc

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200002dc 	.word	0x200002dc

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000018 	.word	0x20000018

08001e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	60d3      	str	r3, [r2, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	@ (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	@ (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fdc:	f7ff ff8e 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff47 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff5c 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff8e 	bl	8001f50 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5d 	bl	8001efc <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffb0 	bl	8001fb8 <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e177      	b.n	8002370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8166 	bne.w	800236a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d130      	bne.n	8002118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80c0 	beq.w	800236a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <HAL_GPIO_Init+0x324>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	4a65      	ldr	r2, [pc, #404]	@ (8002388 <HAL_GPIO_Init+0x324>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fa:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_GPIO_Init+0x324>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a61      	ldr	r2, [pc, #388]	@ (800238c <HAL_GPIO_Init+0x328>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	@ (8002390 <HAL_GPIO_Init+0x32c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d037      	beq.n	80022a2 <HAL_GPIO_Init+0x23e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a57      	ldr	r2, [pc, #348]	@ (8002394 <HAL_GPIO_Init+0x330>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_GPIO_Init+0x23a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a56      	ldr	r2, [pc, #344]	@ (8002398 <HAL_GPIO_Init+0x334>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x236>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a55      	ldr	r2, [pc, #340]	@ (800239c <HAL_GPIO_Init+0x338>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x232>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a54      	ldr	r2, [pc, #336]	@ (80023a0 <HAL_GPIO_Init+0x33c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a53      	ldr	r2, [pc, #332]	@ (80023a4 <HAL_GPIO_Init+0x340>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_GPIO_Init+0x344>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a51      	ldr	r2, [pc, #324]	@ (80023ac <HAL_GPIO_Init+0x348>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a50      	ldr	r2, [pc, #320]	@ (80023b0 <HAL_GPIO_Init+0x34c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	@ (80023b4 <HAL_GPIO_Init+0x350>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x21a>
 800227a:	2309      	movs	r3, #9
 800227c:	e012      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800227e:	230a      	movs	r3, #10
 8002280:	e010      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002282:	2308      	movs	r3, #8
 8002284:	e00e      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002286:	2307      	movs	r3, #7
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228a:	2306      	movs	r3, #6
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	@ (800238c <HAL_GPIO_Init+0x328>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a34      	ldr	r2, [pc, #208]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b32      	ldr	r3, [pc, #200]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a29      	ldr	r2, [pc, #164]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1f      	ldr	r2, [pc, #124]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <HAL_GPIO_Init+0x354>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae84 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	@ 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40021c00 	.word	0x40021c00
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40022400 	.word	0x40022400
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002400:	887a      	ldrh	r2, [r7, #2]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	041a      	lsls	r2, r3, #16
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43d9      	mvns	r1, r3
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	400b      	ands	r3, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e12b      	b.n	800268e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fa92 	bl	8000974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	@ 0x24
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002488:	f001 f954 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 800248c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a81      	ldr	r2, [pc, #516]	@ (8002698 <HAL_I2C_Init+0x274>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d807      	bhi.n	80024a8 <HAL_I2C_Init+0x84>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a80      	ldr	r2, [pc, #512]	@ (800269c <HAL_I2C_Init+0x278>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e006      	b.n	80024b6 <HAL_I2C_Init+0x92>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a7d      	ldr	r2, [pc, #500]	@ (80026a0 <HAL_I2C_Init+0x27c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	bf94      	ite	ls
 80024b0:	2301      	movls	r3, #1
 80024b2:	2300      	movhi	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0e7      	b.n	800268e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a78      	ldr	r2, [pc, #480]	@ (80026a4 <HAL_I2C_Init+0x280>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002698 <HAL_I2C_Init+0x274>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d802      	bhi.n	80024f8 <HAL_I2C_Init+0xd4>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	e009      	b.n	800250c <HAL_I2C_Init+0xe8>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	4a69      	ldr	r2, [pc, #420]	@ (80026a8 <HAL_I2C_Init+0x284>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800251e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	495c      	ldr	r1, [pc, #368]	@ (8002698 <HAL_I2C_Init+0x274>)
 8002528:	428b      	cmp	r3, r1
 800252a:	d819      	bhi.n	8002560 <HAL_I2C_Init+0x13c>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e59      	subs	r1, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fbb1 f3f3 	udiv	r3, r1, r3
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002540:	400b      	ands	r3, r1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_I2C_Init+0x138>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1e59      	subs	r1, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fbb1 f3f3 	udiv	r3, r1, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255a:	e051      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 800255c:	2304      	movs	r3, #4
 800255e:	e04f      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d111      	bne.n	800258c <HAL_I2C_Init+0x168>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	440b      	add	r3, r1
 8002576:	fbb0 f3f3 	udiv	r3, r0, r3
 800257a:	3301      	adds	r3, #1
 800257c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e012      	b.n	80025b2 <HAL_I2C_Init+0x18e>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1e58      	subs	r0, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	0099      	lsls	r1, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x196>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e022      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <HAL_I2C_Init+0x1bc>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e58      	subs	r0, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	440b      	add	r3, r1
 80025d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025de:	e00f      	b.n	8002600 <HAL_I2C_Init+0x1dc>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	0099      	lsls	r1, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	6809      	ldr	r1, [r1, #0]
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69da      	ldr	r2, [r3, #28]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800262e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6911      	ldr	r1, [r2, #16]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	430b      	orrs	r3, r1
 8002642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	000186a0 	.word	0x000186a0
 800269c:	001e847f 	.word	0x001e847f
 80026a0:	003d08ff 	.word	0x003d08ff
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	10624dd3 	.word	0x10624dd3

080026ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	461a      	mov	r2, r3
 80026b8:	460b      	mov	r3, r1
 80026ba:	817b      	strh	r3, [r7, #10]
 80026bc:	4613      	mov	r3, r2
 80026be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff fbba 	bl	8001e38 <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	f040 80e0 	bne.w	8002894 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2319      	movs	r3, #25
 80026da:	2201      	movs	r2, #1
 80026dc:	4970      	ldr	r1, [pc, #448]	@ (80028a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f964 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	e0d3      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2C_Master_Transmit+0x50>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0cc      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d007      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2221      	movs	r2, #33	@ 0x21
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2210      	movs	r2, #16
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a50      	ldr	r2, [pc, #320]	@ (80028a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	6a3a      	ldr	r2, [r7, #32]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f89c 	bl	80028a8 <I2C_MasterRequestWrite>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e08d      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002790:	e066      	b.n	8002860 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	6a39      	ldr	r1, [r7, #32]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fa22 	bl	8002be0 <I2C_WaitOnTXEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d107      	bne.n	80027ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06b      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d11b      	bne.n	8002834 <HAL_I2C_Master_Transmit+0x188>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d017      	beq.n	8002834 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	6a39      	ldr	r1, [r7, #32]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fa19 	bl	8002c70 <I2C_WaitOnBTFFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2b04      	cmp	r3, #4
 800284a:	d107      	bne.n	800285c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e01a      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d194      	bne.n	8002792 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	00100002 	.word	0x00100002
 80028a4:	ffff0000 	.word	0xffff0000

080028a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	460b      	mov	r3, r1
 80028b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d006      	beq.n	80028d2 <I2C_MasterRequestWrite+0x2a>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d003      	beq.n	80028d2 <I2C_MasterRequestWrite+0x2a>
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028d0:	d108      	bne.n	80028e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e00b      	b.n	80028fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	2b12      	cmp	r3, #18
 80028ea:	d107      	bne.n	80028fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f84f 	bl	80029ac <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002922:	d103      	bne.n	800292c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e035      	b.n	800299c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002938:	d108      	bne.n	800294c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	e01b      	b.n	8002984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	11db      	asrs	r3, r3, #7
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0306 	and.w	r3, r3, #6
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f063 030f 	orn	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	490e      	ldr	r1, [pc, #56]	@ (80029a4 <I2C_MasterRequestWrite+0xfc>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f898 	bl	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e010      	b.n	800299c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <I2C_MasterRequestWrite+0x100>)
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f888 	bl	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	00010008 	.word	0x00010008
 80029a8:	00010002 	.word	0x00010002

080029ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029bc:	e048      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c4:	d044      	beq.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff fa37 	bl	8001e38 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d139      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	0c1b      	lsrs	r3, r3, #16
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d10d      	bne.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	e00c      	b.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d116      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e023      	b.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10d      	bne.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	43da      	mvns	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	e00c      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	43da      	mvns	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	4013      	ands	r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d093      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aae:	e071      	b.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002abe:	d123      	bne.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ace:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0204 	orr.w	r2, r3, #4
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e067      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b0e:	d041      	beq.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7ff f992 	bl	8001e38 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d136      	bne.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10c      	bne.n	8002b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e00b      	b.n	8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e021      	b.n	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0c1b      	lsrs	r3, r3, #16
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d10c      	bne.n	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e00b      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f47f af6d 	bne.w	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bec:	e034      	b.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f886 	bl	8002d00 <I2C_IsAcknowledgeFailed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e034      	b.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c04:	d028      	beq.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7ff f917 	bl	8001e38 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11d      	bne.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	2b80      	cmp	r3, #128	@ 0x80
 8002c28:	d016      	beq.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b80      	cmp	r3, #128	@ 0x80
 8002c64:	d1c3      	bne.n	8002bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7c:	e034      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f83e 	bl	8002d00 <I2C_IsAcknowledgeFailed>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e034      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c94:	d028      	beq.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c96:	f7ff f8cf 	bl	8001e38 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d302      	bcc.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11d      	bne.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d016      	beq.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e007      	b.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d1c3      	bne.n	8002c7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d16:	d11b      	bne.n	8002d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	f043 0204 	orr.w	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d129      	bne.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	@ 0x24
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0210 	bic.w	r2, r2, #16
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d12a      	bne.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	@ 0x24
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e10:	89fb      	ldrh	r3, [r7, #14]
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	89fb      	ldrh	r3, [r7, #14]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	89fa      	ldrh	r2, [r7, #14]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e267      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d075      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e72:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d00c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7e:	4b85      	ldr	r3, [pc, #532]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d112      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b82      	ldr	r3, [pc, #520]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4b7e      	ldr	r3, [pc, #504]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d05b      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d157      	bne.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e242      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x74>
 8002eba:	4b76      	ldr	r3, [pc, #472]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a75      	ldr	r2, [pc, #468]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e01d      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x98>
 8002ed2:	4b70      	ldr	r3, [pc, #448]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6f      	ldr	r2, [pc, #444]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b6d      	ldr	r3, [pc, #436]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6c      	ldr	r2, [pc, #432]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCC_OscConfig+0xb0>
 8002eec:	4b69      	ldr	r3, [pc, #420]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a68      	ldr	r2, [pc, #416]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b66      	ldr	r3, [pc, #408]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a65      	ldr	r2, [pc, #404]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe ff94 	bl	8001e38 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe ff90 	bl	8001e38 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	@ 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e207      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b5b      	ldr	r3, [pc, #364]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe ff80 	bl	8001e38 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe ff7c 	bl	8001e38 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1f3      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	4b51      	ldr	r3, [pc, #324]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d063      	beq.n	8003032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b47      	ldr	r3, [pc, #284]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b44      	ldr	r3, [pc, #272]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b41      	ldr	r3, [pc, #260]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1c7      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4937      	ldr	r1, [pc, #220]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b34      	ldr	r3, [pc, #208]	@ (8003098 <HAL_RCC_OscConfig+0x244>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe ff35 	bl	8001e38 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe ff31 	bl	8001e38 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1a8      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4925      	ldr	r1, [pc, #148]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b24      	ldr	r3, [pc, #144]	@ (8003098 <HAL_RCC_OscConfig+0x244>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe ff14 	bl	8001e38 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe ff10 	bl	8001e38 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e187      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d036      	beq.n	80030ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	@ (800309c <HAL_RCC_OscConfig+0x248>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fef4 	bl	8001e38 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003054:	f7fe fef0 	bl	8001e38 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e167      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <HAL_RCC_OscConfig+0x240>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x200>
 8003072:	e01b      	b.n	80030ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	@ (800309c <HAL_RCC_OscConfig+0x248>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fedd 	bl	8001e38 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e00e      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fe fed9 	bl	8001e38 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d907      	bls.n	80030a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e150      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
 8003094:	40023800 	.word	0x40023800
 8003098:	42470000 	.word	0x42470000
 800309c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b88      	ldr	r3, [pc, #544]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ea      	bne.n	8003082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8097 	beq.w	80031e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b81      	ldr	r3, [pc, #516]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b7d      	ldr	r3, [pc, #500]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	4a7c      	ldr	r2, [pc, #496]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030da:	4b7a      	ldr	r3, [pc, #488]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b77      	ldr	r3, [pc, #476]	@ (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d118      	bne.n	8003128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b74      	ldr	r3, [pc, #464]	@ (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	@ (80032c8 <HAL_RCC_OscConfig+0x474>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fe fe99 	bl	8001e38 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fe fe95 	bl	8001e38 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e10c      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCC_OscConfig+0x474>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x2ea>
 8003130:	4b64      	ldr	r3, [pc, #400]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	4a63      	ldr	r2, [pc, #396]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	@ 0x70
 800313c:	e01c      	b.n	8003178 <HAL_RCC_OscConfig+0x324>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x30c>
 8003146:	4b5f      	ldr	r3, [pc, #380]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	4a5e      	ldr	r2, [pc, #376]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	6713      	str	r3, [r2, #112]	@ 0x70
 8003152:	4b5c      	ldr	r3, [pc, #368]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003156:	4a5b      	ldr	r2, [pc, #364]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	@ 0x70
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0x324>
 8003160:	4b58      	ldr	r3, [pc, #352]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003164:	4a57      	ldr	r2, [pc, #348]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	@ 0x70
 800316c:	4b55      	ldr	r3, [pc, #340]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003170:	4a54      	ldr	r2, [pc, #336]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 0304 	bic.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fe5a 	bl	8001e38 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fe fe56 	bl	8001e38 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0cb      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	4b49      	ldr	r3, [pc, #292]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ee      	beq.n	8003188 <HAL_RCC_OscConfig+0x334>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fe fe44 	bl	8001e38 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe fe40 	bl	8001e38 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0b5      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	4b3e      	ldr	r3, [pc, #248]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ee      	bne.n	80031b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	4a38      	ldr	r2, [pc, #224]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a1 	beq.w	8003334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f2:	4b34      	ldr	r3, [pc, #208]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d05c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d141      	bne.n	800328a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <HAL_RCC_OscConfig+0x478>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fe14 	bl	8001e38 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fe10 	bl	8001e38 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e087      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	491b      	ldr	r1, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <HAL_RCC_OscConfig+0x478>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fde9 	bl	8001e38 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fde5 	bl	8001e38 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e05c      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x416>
 8003288:	e054      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <HAL_RCC_OscConfig+0x478>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fdd2 	bl	8001e38 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fdce 	bl	8001e38 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e045      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_RCC_OscConfig+0x470>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x444>
 80032b6:	e03d      	b.n	8003334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e038      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_RCC_OscConfig+0x4ec>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d028      	beq.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d121      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d11a      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	4293      	cmp	r3, r2
 800330a:	d111      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40023800 	.word	0x40023800

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cc      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d90c      	bls.n	8003380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b65      	ldr	r3, [pc, #404]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d044      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b3f      	ldr	r3, [pc, #252]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e067      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4934      	ldr	r1, [pc, #208]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fe fd00 	bl	8001e38 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe fcfc 	bl	8001e38 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20c      	bcs.n	800348c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	@ (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fc60 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	08005704 	.word	0x08005704
 8003508:	20000004 	.word	0x20000004
 800350c:	20000014 	.word	0x20000014

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003514:	b094      	sub	sp, #80	@ 0x50
 8003516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
 800351c:	2300      	movs	r3, #0
 800351e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003520:	2300      	movs	r3, #0
 8003522:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003528:	4b79      	ldr	r3, [pc, #484]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d00d      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 8003534:	2b08      	cmp	r3, #8
 8003536:	f200 80e1 	bhi.w	80036fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 800353e:	2b04      	cmp	r3, #4
 8003540:	d003      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3a>
 8003542:	e0db      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b73      	ldr	r3, [pc, #460]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x204>)
 8003546:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003548:	e0db      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b73      	ldr	r3, [pc, #460]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x208>)
 800354c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800354e:	e0d8      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003558:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355a:	4b6d      	ldr	r3, [pc, #436]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003570:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	633b      	str	r3, [r7, #48]	@ 0x30
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
 800357e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003582:	4622      	mov	r2, r4
 8003584:	462b      	mov	r3, r5
 8003586:	f04f 0000 	mov.w	r0, #0
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	0159      	lsls	r1, r3, #5
 8003590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003594:	0150      	lsls	r0, r2, #5
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4621      	mov	r1, r4
 800359c:	1a51      	subs	r1, r2, r1
 800359e:	6139      	str	r1, [r7, #16]
 80035a0:	4629      	mov	r1, r5
 80035a2:	eb63 0301 	sbc.w	r3, r3, r1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b4:	4659      	mov	r1, fp
 80035b6:	018b      	lsls	r3, r1, #6
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035be:	4651      	mov	r1, sl
 80035c0:	018a      	lsls	r2, r1, #6
 80035c2:	4651      	mov	r1, sl
 80035c4:	ebb2 0801 	subs.w	r8, r2, r1
 80035c8:	4659      	mov	r1, fp
 80035ca:	eb63 0901 	sbc.w	r9, r3, r1
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e2:	4690      	mov	r8, r2
 80035e4:	4699      	mov	r9, r3
 80035e6:	4623      	mov	r3, r4
 80035e8:	eb18 0303 	adds.w	r3, r8, r3
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	462b      	mov	r3, r5
 80035f0:	eb49 0303 	adc.w	r3, r9, r3
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003602:	4629      	mov	r1, r5
 8003604:	024b      	lsls	r3, r1, #9
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800360c:	4621      	mov	r1, r4
 800360e:	024a      	lsls	r2, r1, #9
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800361a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800361c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003620:	f7fc fdec 	bl	80001fc <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	e058      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	2200      	movs	r2, #0
 8003636:	4618      	mov	r0, r3
 8003638:	4611      	mov	r1, r2
 800363a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
 8003644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	0159      	lsls	r1, r3, #5
 8003656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365a:	0150      	lsls	r0, r2, #5
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4641      	mov	r1, r8
 8003662:	ebb2 0a01 	subs.w	sl, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb63 0b01 	sbc.w	fp, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800367c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003680:	ebb2 040a 	subs.w	r4, r2, sl
 8003684:	eb63 050b 	sbc.w	r5, r3, fp
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	00eb      	lsls	r3, r5, #3
 8003692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003696:	00e2      	lsls	r2, r4, #3
 8003698:	4614      	mov	r4, r2
 800369a:	461d      	mov	r5, r3
 800369c:	4643      	mov	r3, r8
 800369e:	18e3      	adds	r3, r4, r3
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	464b      	mov	r3, r9
 80036a4:	eb45 0303 	adc.w	r3, r5, r3
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036b6:	4629      	mov	r1, r5
 80036b8:	028b      	lsls	r3, r1, #10
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c0:	4621      	mov	r1, r4
 80036c2:	028a      	lsls	r2, r1, #10
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ca:	2200      	movs	r2, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	61fa      	str	r2, [r7, #28]
 80036d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d4:	f7fc fd92 	bl	80001fc <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4613      	mov	r3, r2
 80036de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	3301      	adds	r3, #1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80036f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036fa:	e002      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003704:	4618      	mov	r0, r3
 8003706:	3750      	adds	r7, #80	@ 0x50
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000004 	.word	0x20000004

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4903      	ldr	r1, [pc, #12]	@ (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	08005714 	.word	0x08005714

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003760:	f7ff ffdc 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0b5b      	lsrs	r3, r3, #13
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	08005714 	.word	0x08005714

08003784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d075      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037b8:	4b91      	ldr	r3, [pc, #580]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037be:	f7fe fb3b 	bl	8001e38 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037c6:	f7fe fb37 	bl	8001e38 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e189      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f0      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	019a      	lsls	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	071b      	lsls	r3, r3, #28
 80037fc:	4981      	ldr	r1, [pc, #516]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003810:	4b7c      	ldr	r3, [pc, #496]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003816:	0f1b      	lsrs	r3, r3, #28
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	019a      	lsls	r2, r3, #6
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	431a      	orrs	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	071b      	lsls	r3, r3, #28
 8003830:	4974      	ldr	r1, [pc, #464]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003838:	4b72      	ldr	r3, [pc, #456]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800383a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800383e:	f023 021f 	bic.w	r2, r3, #31
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	3b01      	subs	r3, #1
 8003848:	496e      	ldr	r1, [pc, #440]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	019a      	lsls	r2, r3, #6
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	061b      	lsls	r3, r3, #24
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	071b      	lsls	r3, r3, #28
 8003870:	4964      	ldr	r1, [pc, #400]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003878:	4b61      	ldr	r3, [pc, #388]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800387e:	f7fe fadb 	bl	8001e38 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003886:	f7fe fad7 	bl	8001e38 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e129      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003898:	4b5a      	ldr	r3, [pc, #360]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d079      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038bc:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038c2:	f7fe fab9 	bl	8001e38 <HAL_GetTick>
 80038c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038ca:	f7fe fab5 	bl	8001e38 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e107      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038dc:	4b49      	ldr	r3, [pc, #292]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e8:	d0ef      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d020      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038f6:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	0f1b      	lsrs	r3, r3, #28
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	019a      	lsls	r2, r3, #6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	493b      	ldr	r1, [pc, #236]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800391e:	4b39      	ldr	r3, [pc, #228]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003924:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	3b01      	subs	r3, #1
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	4934      	ldr	r1, [pc, #208]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01e      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003944:	4b2f      	ldr	r3, [pc, #188]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	0e1b      	lsrs	r3, r3, #24
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	019a      	lsls	r2, r3, #6
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	061b      	lsls	r3, r3, #24
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	071b      	lsls	r3, r3, #28
 8003964:	4927      	ldr	r1, [pc, #156]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800396c:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800396e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003972:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	4922      	ldr	r1, [pc, #136]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003982:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003988:	f7fe fa56 	bl	8001e38 <HAL_GetTick>
 800398c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003990:	f7fe fa52 	bl	8001e38 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e0a4      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039a2:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ae:	d1ef      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 808b 	beq.w	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039da:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0b      	ldr	r2, [pc, #44]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039e6:	f7fe fa27 	bl	8001e38 <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039ec:	e010      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe fa23 	bl	8001e38 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d909      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e075      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003a00:	42470068 	.word	0x42470068
 8003a04:	40023800 	.word	0x40023800
 8003a08:	42470070 	.word	0x42470070
 8003a0c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a10:	4b38      	ldr	r3, [pc, #224]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0e8      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a1c:	4b36      	ldr	r3, [pc, #216]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d028      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	4b2d      	ldr	r3, [pc, #180]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003afc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a50:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a56:	4b28      	ldr	r3, [pc, #160]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d114      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fe f9e9 	bl	8001e38 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe f9e5 	bl	8001e38 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e035      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ee      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a98:	d10d      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	4912      	ldr	r1, [pc, #72]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003ab6:	4b10      	ldr	r3, [pc, #64]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4a0f      	ldr	r2, [pc, #60]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003abc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ac0:	6093      	str	r3, [r2, #8]
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ac4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	490a      	ldr	r1, [pc, #40]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003ae8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40007000 	.word	0x40007000
 8003af8:	40023800 	.word	0x40023800
 8003afc:	42470e40 	.word	0x42470e40
 8003b00:	424711e0 	.word	0x424711e0

08003b04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e073      	b.n	8003c02 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7f5b      	ldrb	r3, [r3, #29]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fc ff6a 	bl	8000a04 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d055      	beq.n	8003bf0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	22ca      	movs	r2, #202	@ 0xca
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2253      	movs	r2, #83	@ 0x53
 8003b52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fa49 	bl	8003fec <RTC_EnterInitMode>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d12c      	bne.n	8003bbe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b76:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6919      	ldr	r1, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	041a      	lsls	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa50 	bl	800405a <RTC_ExitInitMode>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d110      	bne.n	8003be6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bd2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	22ff      	movs	r2, #255	@ 0xff
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bee:	e001      	b.n	8003bf4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c0a:	b590      	push	{r4, r7, lr}
 8003c0c:	b087      	sub	sp, #28
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	7f1b      	ldrb	r3, [r3, #28]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_RTC_SetTime+0x1c>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e087      	b.n	8003d36 <HAL_RTC_SetTime+0x12c>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d126      	bne.n	8003c86 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fa27 	bl	80040a4 <RTC_ByteToBcd2>
 8003c56:	4603      	mov	r3, r0
 8003c58:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fa20 	bl	80040a4 <RTC_ByteToBcd2>
 8003c64:	4603      	mov	r3, r0
 8003c66:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c68:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	789b      	ldrb	r3, [r3, #2]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa18 	bl	80040a4 <RTC_ByteToBcd2>
 8003c74:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c76:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	78db      	ldrb	r3, [r3, #3]
 8003c7e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e018      	b.n	8003cb8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ca6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003cac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	78db      	ldrb	r3, [r3, #3]
 8003cb2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	22ca      	movs	r2, #202	@ 0xca
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2253      	movs	r2, #83	@ 0x53
 8003cc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f98f 	bl	8003fec <RTC_EnterInitMode>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d120      	bne.n	8003d1a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003ce2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003cf6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f9a2 	bl	800405a <RTC_ExitInitMode>
 8003d16:	4603      	mov	r3, r0
 8003d18:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	22ff      	movs	r2, #255	@ 0xff
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]

  return status;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd90      	pop	{r4, r7, pc}

08003d3e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003d70:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	0a1b      	lsrs	r3, r3, #8
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	0d9b      	lsrs	r3, r3, #22
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11a      	bne.n	8003df0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f98e 	bl	80040e0 <RTC_Bcd2ToByte>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f985 	bl	80040e0 <RTC_Bcd2ToByte>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	789b      	ldrb	r3, [r3, #2]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f97c 	bl	80040e0 <RTC_Bcd2ToByte>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003dfa:	b590      	push	{r4, r7, lr}
 8003dfc:	b087      	sub	sp, #28
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	7f1b      	ldrb	r3, [r3, #28]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_RTC_SetDate+0x1c>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e071      	b.n	8003efa <HAL_RTC_SetDate+0x100>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10e      	bne.n	8003e46 <HAL_RTC_SetDate+0x4c>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	785b      	ldrb	r3, [r3, #1]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	330a      	adds	r3, #10
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11c      	bne.n	8003e86 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	78db      	ldrb	r3, [r3, #3]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f927 	bl	80040a4 <RTC_ByteToBcd2>
 8003e56:	4603      	mov	r3, r0
 8003e58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f920 	bl	80040a4 <RTC_ByteToBcd2>
 8003e64:	4603      	mov	r3, r0
 8003e66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	789b      	ldrb	r3, [r3, #2]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f918 	bl	80040a4 <RTC_ByteToBcd2>
 8003e74:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e76:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e00e      	b.n	8003ea4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003e92:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003e98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	22ca      	movs	r2, #202	@ 0xca
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2253      	movs	r2, #83	@ 0x53
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f899 	bl	8003fec <RTC_EnterInitMode>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10c      	bne.n	8003ede <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ece:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ed2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f8c0 	bl	800405a <RTC_ExitInitMode>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	22ff      	movs	r2, #255	@ 0xff
 8003ef0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]

  return status;
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}

08003f02 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f1c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	0b5b      	lsrs	r3, r3, #13
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11a      	bne.n	8003f96 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	78db      	ldrb	r3, [r3, #3]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f8bb 	bl	80040e0 <RTC_Bcd2ToByte>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f8b2 	bl	80040e0 <RTC_Bcd2ToByte>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	789b      	ldrb	r3, [r3, #2]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f8a9 	bl	80040e0 <RTC_Bcd2ToByte>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <HAL_RTC_WaitForSynchro+0x48>)
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb4:	f7fd ff40 	bl	8001e38 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fba:	e009      	b.n	8003fd0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fbc:	f7fd ff3c 	bl	8001e38 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fca:	d901      	bls.n	8003fd0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e007      	b.n	8003fe0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ee      	beq.n	8003fbc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00017f5f 	.word	0x00017f5f

08003fec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d122      	bne.n	8004050 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004018:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800401a:	f7fd ff0d 	bl	8001e38 <HAL_GetTick>
 800401e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004020:	e00c      	b.n	800403c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004022:	f7fd ff09 	bl	8001e38 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004030:	d904      	bls.n	800403c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <RTC_EnterInitMode+0x64>
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d1e8      	bne.n	8004022 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004074:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff8b 	bl	8003fa0 <HAL_RTC_WaitForSynchro>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2204      	movs	r2, #4
 8004094:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80040b2:	e005      	b.n	80040c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	3b0a      	subs	r3, #10
 80040be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	2b09      	cmp	r3, #9
 80040c4:	d8f6      	bhi.n	80040b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b2db      	uxtb	r3, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	b2db      	uxtb	r3, r3
 800410c:	4413      	add	r3, r2
 800410e:	b2db      	uxtb	r3, r3
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07b      	b.n	8004226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fc72 	bl	8000a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0104 	and.w	r1, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f003 0210 	and.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b088      	sub	sp, #32
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_SPI_Transmit+0x22>
 800424c:	2302      	movs	r3, #2
 800424e:	e12d      	b.n	80044ac <HAL_SPI_Transmit+0x27e>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004258:	f7fd fdee 	bl	8001e38 <HAL_GetTick>
 800425c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004272:	e116      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x52>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004284:	e10d      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042cc:	d10f      	bne.n	80042ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d007      	beq.n	800430c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004314:	d14f      	bne.n	80043b6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Transmit+0xf6>
 800431e:	8afb      	ldrh	r3, [r7, #22]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d142      	bne.n	80043aa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	1c9a      	adds	r2, r3, #2
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004348:	e02f      	b.n	80043aa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d112      	bne.n	800437e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800437c:	e015      	b.n	80043aa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437e:	f7fd fd5b 	bl	8001e38 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d803      	bhi.n	8004396 <HAL_SPI_Transmit+0x168>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004394:	d102      	bne.n	800439c <HAL_SPI_Transmit+0x16e>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043a8:	e07b      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ca      	bne.n	800434a <HAL_SPI_Transmit+0x11c>
 80043b4:	e050      	b.n	8004458 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0x196>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d144      	bne.n	800444e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043ea:	e030      	b.n	800444e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d113      	bne.n	8004422 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004420:	e015      	b.n	800444e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004422:	f7fd fd09 	bl	8001e38 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d803      	bhi.n	800443a <HAL_SPI_Transmit+0x20c>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004438:	d102      	bne.n	8004440 <HAL_SPI_Transmit+0x212>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800444c:	e029      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1c9      	bne.n	80043ec <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fbdf 	bl	8004c20 <SPI_EndRxTxTransaction>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e003      	b.n	80044a2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
 80044d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044d8:	e0fb      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e2:	d112      	bne.n	800450a <HAL_SPI_Receive+0x56>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10e      	bne.n	800450a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2204      	movs	r2, #4
 80044f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f8ef 	bl	80046e4 <HAL_SPI_TransmitReceive>
 8004506:	4603      	mov	r3, r0
 8004508:	e0e8      	b.n	80046dc <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_SPI_Receive+0x64>
 8004514:	2302      	movs	r3, #2
 8004516:	e0e1      	b.n	80046dc <HAL_SPI_Receive+0x228>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004520:	f7fd fc8a 	bl	8001e38 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_Receive+0x7e>
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004536:	e0cc      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2204      	movs	r2, #4
 800453c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	88fa      	ldrh	r2, [r7, #6]
 8004556:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800457e:	d10f      	bne.n	80045a0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800458e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b40      	cmp	r3, #64	@ 0x40
 80045ac:	d007      	beq.n	80045be <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d16a      	bne.n	800469c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045c6:	e032      	b.n	800462e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d115      	bne.n	8004602 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f103 020c 	add.w	r2, r3, #12
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	7812      	ldrb	r2, [r2, #0]
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004600:	e015      	b.n	800462e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004602:	f7fd fc19 	bl	8001e38 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d803      	bhi.n	800461a <HAL_SPI_Receive+0x166>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004618:	d102      	bne.n	8004620 <HAL_SPI_Receive+0x16c>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800462c:	e051      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1c7      	bne.n	80045c8 <HAL_SPI_Receive+0x114>
 8004638:	e035      	b.n	80046a6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d113      	bne.n	8004670 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	b292      	uxth	r2, r2
 8004654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	1c9a      	adds	r2, r3, #2
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800466e:	e015      	b.n	800469c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004670:	f7fd fbe2 	bl	8001e38 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d803      	bhi.n	8004688 <HAL_SPI_Receive+0x1d4>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004686:	d102      	bne.n	800468e <HAL_SPI_Receive+0x1da>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800469a:	e01a      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1c9      	bne.n	800463a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fa52 	bl	8004b54 <SPI_EndRxTransaction>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75fb      	strb	r3, [r7, #23]
 80046c8:	e003      	b.n	80046d2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	@ 0x30
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046f2:	2301      	movs	r3, #1
 80046f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_SPI_TransmitReceive+0x26>
 8004706:	2302      	movs	r3, #2
 8004708:	e198      	b.n	8004a3c <HAL_SPI_TransmitReceive+0x358>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004712:	f7fd fb91 	bl	8001e38 <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800472c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004730:	2b01      	cmp	r3, #1
 8004732:	d00f      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x70>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800473a:	d107      	bne.n	800474c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_SPI_TransmitReceive+0x68>
 8004744:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004748:	2b04      	cmp	r3, #4
 800474a:	d003      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004752:	e16d      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x82>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x82>
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800476c:	e160      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b04      	cmp	r3, #4
 8004778:	d003      	beq.n	8004782 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2205      	movs	r2, #5
 800477e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	887a      	ldrh	r2, [r7, #2]
 8004792:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	d007      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047de:	d17c      	bne.n	80048da <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x10a>
 80047e8:	8b7b      	ldrh	r3, [r7, #26]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d16a      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004812:	e057      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	d11b      	bne.n	800485a <HAL_SPI_TransmitReceive+0x176>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d016      	beq.n	800485a <HAL_SPI_TransmitReceive+0x176>
 800482c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d113      	bne.n	800485a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d119      	bne.n	800489c <HAL_SPI_TransmitReceive+0x1b8>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d014      	beq.n	800489c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	b292      	uxth	r2, r2
 800487e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	1c9a      	adds	r2, r3, #2
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800489c:	f7fd facc 	bl	8001e38 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d80b      	bhi.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048b2:	d007      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80048c2:	e0b5      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1a2      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x130>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d19d      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x130>
 80048d8:	e080      	b.n	80049dc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x204>
 80048e2:	8b7b      	ldrh	r3, [r7, #26]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d16f      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	7812      	ldrb	r2, [r2, #0]
 80048f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490e:	e05b      	b.n	80049c8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d11c      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x274>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d017      	beq.n	8004958 <HAL_SPI_TransmitReceive+0x274>
 8004928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d114      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d119      	bne.n	800499a <HAL_SPI_TransmitReceive+0x2b6>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d014      	beq.n	800499a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800499a:	f7fd fa4d 	bl	8001e38 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d803      	bhi.n	80049b2 <HAL_SPI_TransmitReceive+0x2ce>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x2d4>
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80049c6:	e033      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d19e      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x22c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d199      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f91d 	bl	8004c20 <SPI_EndRxTxTransaction>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80049f8:	e01a      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a26:	e003      	b.n	8004a30 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3730      	adds	r7, #48	@ 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a54:	f7fd f9f0 	bl	8001e38 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	4413      	add	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a64:	f7fd f9e8 	bl	8001e38 <HAL_GetTick>
 8004a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a6a:	4b39      	ldr	r3, [pc, #228]	@ (8004b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	015b      	lsls	r3, r3, #5
 8004a70:	0d1b      	lsrs	r3, r3, #20
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	fb02 f303 	mul.w	r3, r2, r3
 8004a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a7a:	e054      	b.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a82:	d050      	beq.n	8004b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a84:	f7fd f9d8 	bl	8001e38 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d902      	bls.n	8004a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d13d      	bne.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ab2:	d111      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004abc:	d004      	beq.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac6:	d107      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ae0:	d10f      	bne.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e017      	b.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d19b      	bne.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000004 	.word	0x20000004

08004b54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b68:	d111      	bne.n	8004b8e <SPI_EndRxTransaction+0x3a>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b72:	d004      	beq.n	8004b7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b7c:	d107      	bne.n	8004b8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b96:	d12a      	bne.n	8004bee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba0:	d012      	beq.n	8004bc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	@ 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff ff49 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02d      	beq.n	8004c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e026      	b.n	8004c16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff ff36 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01a      	beq.n	8004c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e013      	b.n	8004c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff ff23 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e000      	b.n	8004c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2201      	movs	r2, #1
 8004c34:	2102      	movs	r1, #2
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff04 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e032      	b.n	8004cb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c52:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc0 <SPI_EndRxTxTransaction+0xa0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc4 <SPI_EndRxTxTransaction+0xa4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0d5b      	lsrs	r3, r3, #21
 8004c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c70:	d112      	bne.n	8004c98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff fee1 	bl	8004a44 <SPI_WaitFlagStateUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e00f      	b.n	8004cb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cae:	2b80      	cmp	r3, #128	@ 0x80
 8004cb0:	d0f2      	beq.n	8004c98 <SPI_EndRxTxTransaction+0x78>
 8004cb2:	e000      	b.n	8004cb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8004cb4:	bf00      	nop
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000004 	.word	0x20000004
 8004cc4:	165e9f81 	.word	0x165e9f81

08004cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e042      	b.n	8004d60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fb ff1a 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	@ 0x24
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f973 	bl	8004ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d175      	bne.n	8004e74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Transmit+0x2c>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e06e      	b.n	8004e76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2221      	movs	r2, #33	@ 0x21
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da6:	f7fd f847 	bl	8001e38 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	88fa      	ldrh	r2, [r7, #6]
 8004db6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Transmit+0x6c>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ddc:	e02e      	b.n	8004e3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f848 	bl	8004e7e <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e03a      	b.n	8004e76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e007      	b.n	8004e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1cb      	bne.n	8004dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2140      	movs	r1, #64	@ 0x40
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f814 	bl	8004e7e <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e006      	b.n	8004e76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8e:	e03b      	b.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e96:	d037      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e98:	f7fc ffce 	bl	8001e38 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d302      	bcc.n	8004eae <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e03a      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d023      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b80      	cmp	r3, #128	@ 0x80
 8004ec4:	d020      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d01d      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d116      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f81d 	bl	8004f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2208      	movs	r2, #8
 8004efa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e00f      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d0b4      	beq.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b095      	sub	sp, #84	@ 0x54
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f58:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d119      	bne.n	8004fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f023 0310 	bic.w	r3, r3, #16
 8004fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc8:	61ba      	str	r2, [r7, #24]
 8004fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fea:	bf00      	nop
 8004fec:	3754      	adds	r7, #84	@ 0x54
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ffc:	b0c0      	sub	sp, #256	@ 0x100
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	68d9      	ldr	r1, [r3, #12]
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	ea40 0301 	orr.w	r3, r0, r1
 8005020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	431a      	orrs	r2, r3
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005050:	f021 010c 	bic.w	r1, r1, #12
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800505e:	430b      	orrs	r3, r1
 8005060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800506e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005072:	6999      	ldr	r1, [r3, #24]
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	ea40 0301 	orr.w	r3, r0, r1
 800507e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b8f      	ldr	r3, [pc, #572]	@ (80052c4 <UART_SetConfig+0x2cc>)
 8005088:	429a      	cmp	r2, r3
 800508a:	d005      	beq.n	8005098 <UART_SetConfig+0xa0>
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b8d      	ldr	r3, [pc, #564]	@ (80052c8 <UART_SetConfig+0x2d0>)
 8005094:	429a      	cmp	r2, r3
 8005096:	d104      	bne.n	80050a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7fe fb60 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 800509c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050a0:	e003      	b.n	80050aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050a2:	f7fe fb47 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 80050a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b4:	f040 810c 	bne.w	80052d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050ca:	4622      	mov	r2, r4
 80050cc:	462b      	mov	r3, r5
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050d2:	415b      	adcs	r3, r3
 80050d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050da:	4621      	mov	r1, r4
 80050dc:	eb12 0801 	adds.w	r8, r2, r1
 80050e0:	4629      	mov	r1, r5
 80050e2:	eb43 0901 	adc.w	r9, r3, r1
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fa:	4690      	mov	r8, r2
 80050fc:	4699      	mov	r9, r3
 80050fe:	4623      	mov	r3, r4
 8005100:	eb18 0303 	adds.w	r3, r8, r3
 8005104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005108:	462b      	mov	r3, r5
 800510a:	eb49 0303 	adc.w	r3, r9, r3
 800510e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800511e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005126:	460b      	mov	r3, r1
 8005128:	18db      	adds	r3, r3, r3
 800512a:	653b      	str	r3, [r7, #80]	@ 0x50
 800512c:	4613      	mov	r3, r2
 800512e:	eb42 0303 	adc.w	r3, r2, r3
 8005132:	657b      	str	r3, [r7, #84]	@ 0x54
 8005134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800513c:	f7fb f85e 	bl	80001fc <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4b61      	ldr	r3, [pc, #388]	@ (80052cc <UART_SetConfig+0x2d4>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011c      	lsls	r4, r3, #4
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800515c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005168:	415b      	adcs	r3, r3
 800516a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800516c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005170:	4641      	mov	r1, r8
 8005172:	eb12 0a01 	adds.w	sl, r2, r1
 8005176:	4649      	mov	r1, r9
 8005178:	eb43 0b01 	adc.w	fp, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800518c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005190:	4692      	mov	sl, r2
 8005192:	469b      	mov	fp, r3
 8005194:	4643      	mov	r3, r8
 8005196:	eb1a 0303 	adds.w	r3, sl, r3
 800519a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800519e:	464b      	mov	r3, r9
 80051a0:	eb4b 0303 	adc.w	r3, fp, r3
 80051a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051d2:	f7fb f813 	bl	80001fc <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	4b3b      	ldr	r3, [pc, #236]	@ (80052cc <UART_SetConfig+0x2d4>)
 80051de:	fba3 2301 	umull	r2, r3, r3, r1
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2264      	movs	r2, #100	@ 0x64
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	1acb      	subs	r3, r1, r3
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051f2:	4b36      	ldr	r3, [pc, #216]	@ (80052cc <UART_SetConfig+0x2d4>)
 80051f4:	fba3 2302 	umull	r2, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005200:	441c      	add	r4, r3
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800520c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800521c:	415b      	adcs	r3, r3
 800521e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6339      	str	r1, [r7, #48]	@ 0x30
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4651      	mov	r1, sl
 8005242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005258:	464b      	mov	r3, r9
 800525a:	460a      	mov	r2, r1
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005278:	460b      	mov	r3, r1
 800527a:	18db      	adds	r3, r3, r3
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800527e:	4613      	mov	r3, r2
 8005280:	eb42 0303 	adc.w	r3, r2, r3
 8005284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800528a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800528e:	f7fa ffb5 	bl	80001fc <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <UART_SetConfig+0x2d4>)
 8005298:	fba3 1302 	umull	r1, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	2164      	movs	r1, #100	@ 0x64
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3332      	adds	r3, #50	@ 0x32
 80052aa:	4a08      	ldr	r2, [pc, #32]	@ (80052cc <UART_SetConfig+0x2d4>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	f003 0207 	and.w	r2, r3, #7
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4422      	add	r2, r4
 80052be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052c0:	e106      	b.n	80054d0 <UART_SetConfig+0x4d8>
 80052c2:	bf00      	nop
 80052c4:	40011000 	.word	0x40011000
 80052c8:	40011400 	.word	0x40011400
 80052cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052e2:	4642      	mov	r2, r8
 80052e4:	464b      	mov	r3, r9
 80052e6:	1891      	adds	r1, r2, r2
 80052e8:	6239      	str	r1, [r7, #32]
 80052ea:	415b      	adcs	r3, r3
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052f2:	4641      	mov	r1, r8
 80052f4:	1854      	adds	r4, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb43 0501 	adc.w	r5, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	00eb      	lsls	r3, r5, #3
 8005306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530a:	00e2      	lsls	r2, r4, #3
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	4643      	mov	r3, r8
 8005312:	18e3      	adds	r3, r4, r3
 8005314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005318:	464b      	mov	r3, r9
 800531a:	eb45 0303 	adc.w	r3, r5, r3
 800531e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800532e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800533e:	4629      	mov	r1, r5
 8005340:	008b      	lsls	r3, r1, #2
 8005342:	4621      	mov	r1, r4
 8005344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005348:	4621      	mov	r1, r4
 800534a:	008a      	lsls	r2, r1, #2
 800534c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005350:	f7fa ff54 	bl	80001fc <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4b60      	ldr	r3, [pc, #384]	@ (80054dc <UART_SetConfig+0x4e4>)
 800535a:	fba3 2302 	umull	r2, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	011c      	lsls	r4, r3, #4
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800536c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	61b9      	str	r1, [r7, #24]
 800537c:	415b      	adcs	r3, r3
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6139      	str	r1, [r7, #16]
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b8:	464b      	mov	r3, r9
 80053ba:	460a      	mov	r2, r1
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053dc:	4649      	mov	r1, r9
 80053de:	008b      	lsls	r3, r1, #2
 80053e0:	4641      	mov	r1, r8
 80053e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e6:	4641      	mov	r1, r8
 80053e8:	008a      	lsls	r2, r1, #2
 80053ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053ee:	f7fa ff05 	bl	80001fc <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4611      	mov	r1, r2
 80053f8:	4b38      	ldr	r3, [pc, #224]	@ (80054dc <UART_SetConfig+0x4e4>)
 80053fa:	fba3 2301 	umull	r2, r3, r3, r1
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2264      	movs	r2, #100	@ 0x64
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	1acb      	subs	r3, r1, r3
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	3332      	adds	r3, #50	@ 0x32
 800540c:	4a33      	ldr	r2, [pc, #204]	@ (80054dc <UART_SetConfig+0x4e4>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005418:	441c      	add	r4, r3
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541e:	2200      	movs	r2, #0
 8005420:	673b      	str	r3, [r7, #112]	@ 0x70
 8005422:	677a      	str	r2, [r7, #116]	@ 0x74
 8005424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	1891      	adds	r1, r2, r2
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	415b      	adcs	r3, r3
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005438:	4641      	mov	r1, r8
 800543a:	1851      	adds	r1, r2, r1
 800543c:	6039      	str	r1, [r7, #0]
 800543e:	4649      	mov	r1, r9
 8005440:	414b      	adcs	r3, r1
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005450:	4659      	mov	r1, fp
 8005452:	00cb      	lsls	r3, r1, #3
 8005454:	4651      	mov	r1, sl
 8005456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545a:	4651      	mov	r1, sl
 800545c:	00ca      	lsls	r2, r1, #3
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	4603      	mov	r3, r0
 8005464:	4642      	mov	r2, r8
 8005466:	189b      	adds	r3, r3, r2
 8005468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800546a:	464b      	mov	r3, r9
 800546c:	460a      	mov	r2, r1
 800546e:	eb42 0303 	adc.w	r3, r2, r3
 8005472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	663b      	str	r3, [r7, #96]	@ 0x60
 800547e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800548c:	4649      	mov	r1, r9
 800548e:	008b      	lsls	r3, r1, #2
 8005490:	4641      	mov	r1, r8
 8005492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005496:	4641      	mov	r1, r8
 8005498:	008a      	lsls	r2, r1, #2
 800549a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800549e:	f7fa fead 	bl	80001fc <__aeabi_uldivmod>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <UART_SetConfig+0x4e4>)
 80054a8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	2164      	movs	r1, #100	@ 0x64
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	3332      	adds	r3, #50	@ 0x32
 80054ba:	4a08      	ldr	r2, [pc, #32]	@ (80054dc <UART_SetConfig+0x4e4>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	f003 020f 	and.w	r2, r3, #15
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4422      	add	r2, r4
 80054ce:	609a      	str	r2, [r3, #8]
}
 80054d0:	bf00      	nop
 80054d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054d6:	46bd      	mov	sp, r7
 80054d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054dc:	51eb851f 	.word	0x51eb851f

080054e0 <__itoa>:
 80054e0:	1e93      	subs	r3, r2, #2
 80054e2:	2b22      	cmp	r3, #34	@ 0x22
 80054e4:	b510      	push	{r4, lr}
 80054e6:	460c      	mov	r4, r1
 80054e8:	d904      	bls.n	80054f4 <__itoa+0x14>
 80054ea:	2300      	movs	r3, #0
 80054ec:	700b      	strb	r3, [r1, #0]
 80054ee:	461c      	mov	r4, r3
 80054f0:	4620      	mov	r0, r4
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	2a0a      	cmp	r2, #10
 80054f6:	d109      	bne.n	800550c <__itoa+0x2c>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	da07      	bge.n	800550c <__itoa+0x2c>
 80054fc:	232d      	movs	r3, #45	@ 0x2d
 80054fe:	700b      	strb	r3, [r1, #0]
 8005500:	4240      	negs	r0, r0
 8005502:	2101      	movs	r1, #1
 8005504:	4421      	add	r1, r4
 8005506:	f000 f805 	bl	8005514 <__utoa>
 800550a:	e7f1      	b.n	80054f0 <__itoa+0x10>
 800550c:	2100      	movs	r1, #0
 800550e:	e7f9      	b.n	8005504 <__itoa+0x24>

08005510 <itoa>:
 8005510:	f7ff bfe6 	b.w	80054e0 <__itoa>

08005514 <__utoa>:
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005516:	4c1f      	ldr	r4, [pc, #124]	@ (8005594 <__utoa+0x80>)
 8005518:	b08b      	sub	sp, #44	@ 0x2c
 800551a:	4605      	mov	r5, r0
 800551c:	460b      	mov	r3, r1
 800551e:	466e      	mov	r6, sp
 8005520:	f104 0c20 	add.w	ip, r4, #32
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	6861      	ldr	r1, [r4, #4]
 8005528:	4637      	mov	r7, r6
 800552a:	c703      	stmia	r7!, {r0, r1}
 800552c:	3408      	adds	r4, #8
 800552e:	4564      	cmp	r4, ip
 8005530:	463e      	mov	r6, r7
 8005532:	d1f7      	bne.n	8005524 <__utoa+0x10>
 8005534:	7921      	ldrb	r1, [r4, #4]
 8005536:	7139      	strb	r1, [r7, #4]
 8005538:	1e91      	subs	r1, r2, #2
 800553a:	6820      	ldr	r0, [r4, #0]
 800553c:	6038      	str	r0, [r7, #0]
 800553e:	2922      	cmp	r1, #34	@ 0x22
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	d904      	bls.n	8005550 <__utoa+0x3c>
 8005546:	7019      	strb	r1, [r3, #0]
 8005548:	460b      	mov	r3, r1
 800554a:	4618      	mov	r0, r3
 800554c:	b00b      	add	sp, #44	@ 0x2c
 800554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005550:	1e58      	subs	r0, r3, #1
 8005552:	4684      	mov	ip, r0
 8005554:	fbb5 f7f2 	udiv	r7, r5, r2
 8005558:	fb02 5617 	mls	r6, r2, r7, r5
 800555c:	3628      	adds	r6, #40	@ 0x28
 800555e:	446e      	add	r6, sp
 8005560:	460c      	mov	r4, r1
 8005562:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005566:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800556a:	462e      	mov	r6, r5
 800556c:	42b2      	cmp	r2, r6
 800556e:	f101 0101 	add.w	r1, r1, #1
 8005572:	463d      	mov	r5, r7
 8005574:	d9ee      	bls.n	8005554 <__utoa+0x40>
 8005576:	2200      	movs	r2, #0
 8005578:	545a      	strb	r2, [r3, r1]
 800557a:	1919      	adds	r1, r3, r4
 800557c:	1aa5      	subs	r5, r4, r2
 800557e:	42aa      	cmp	r2, r5
 8005580:	dae3      	bge.n	800554a <__utoa+0x36>
 8005582:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005586:	780e      	ldrb	r6, [r1, #0]
 8005588:	7006      	strb	r6, [r0, #0]
 800558a:	3201      	adds	r2, #1
 800558c:	f801 5901 	strb.w	r5, [r1], #-1
 8005590:	e7f4      	b.n	800557c <__utoa+0x68>
 8005592:	bf00      	nop
 8005594:	0800572a 	.word	0x0800572a

08005598 <memset>:
 8005598:	4402      	add	r2, r0
 800559a:	4603      	mov	r3, r0
 800559c:	4293      	cmp	r3, r2
 800559e:	d100      	bne.n	80055a2 <memset+0xa>
 80055a0:	4770      	bx	lr
 80055a2:	f803 1b01 	strb.w	r1, [r3], #1
 80055a6:	e7f9      	b.n	800559c <memset+0x4>

080055a8 <strcat>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	4602      	mov	r2, r0
 80055ac:	7814      	ldrb	r4, [r2, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	3201      	adds	r2, #1
 80055b2:	2c00      	cmp	r4, #0
 80055b4:	d1fa      	bne.n	80055ac <strcat+0x4>
 80055b6:	3b01      	subs	r3, #1
 80055b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	d1f9      	bne.n	80055b8 <strcat+0x10>
 80055c4:	bd10      	pop	{r4, pc}
	...

080055c8 <__libc_init_array>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005600 <__libc_init_array+0x38>)
 80055cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005604 <__libc_init_array+0x3c>)
 80055ce:	1b64      	subs	r4, r4, r5
 80055d0:	10a4      	asrs	r4, r4, #2
 80055d2:	2600      	movs	r6, #0
 80055d4:	42a6      	cmp	r6, r4
 80055d6:	d109      	bne.n	80055ec <__libc_init_array+0x24>
 80055d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005608 <__libc_init_array+0x40>)
 80055da:	4c0c      	ldr	r4, [pc, #48]	@ (800560c <__libc_init_array+0x44>)
 80055dc:	f000 f820 	bl	8005620 <_init>
 80055e0:	1b64      	subs	r4, r4, r5
 80055e2:	10a4      	asrs	r4, r4, #2
 80055e4:	2600      	movs	r6, #0
 80055e6:	42a6      	cmp	r6, r4
 80055e8:	d105      	bne.n	80055f6 <__libc_init_array+0x2e>
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f0:	4798      	blx	r3
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7ee      	b.n	80055d4 <__libc_init_array+0xc>
 80055f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fa:	4798      	blx	r3
 80055fc:	3601      	adds	r6, #1
 80055fe:	e7f2      	b.n	80055e6 <__libc_init_array+0x1e>
 8005600:	08005758 	.word	0x08005758
 8005604:	08005758 	.word	0x08005758
 8005608:	08005758 	.word	0x08005758
 800560c:	0800575c 	.word	0x0800575c

08005610 <strcpy>:
 8005610:	4603      	mov	r3, r0
 8005612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005616:	f803 2b01 	strb.w	r2, [r3], #1
 800561a:	2a00      	cmp	r2, #0
 800561c:	d1f9      	bne.n	8005612 <strcpy+0x2>
 800561e:	4770      	bx	lr

08005620 <_init>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

0800562c <_fini>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr
